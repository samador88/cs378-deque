        -:    0:Source:Deque.h
        -:    0:Graph:TestDeque.gcno
        -:    0:Data:TestDeque.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// --------------------------
        -:    2:// projects/c++/deque/Deque.h
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// --------------------------
        -:    6:
        -:    7:#ifndef Deque_h
        -:    8:#define Deque_h
        -:    9:
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <algorithm> // copy, equal, lexicographical_compare, max, swap
        -:   15:#include <cassert>   // assert
        -:   16:#include <iterator>  // iterator, bidirectional_iterator_tag
        -:   17:#include <memory>    // allocator
        -:   18:#include <stdexcept> // out_of_range
        -:   19:#include <utility>   // !=, <=, >, >=
        -:   20:
        -:   21:// -----
        -:   22:// using
        -:   23:// -----
        -:   24:
        -:   25:using std::rel_ops::operator!=;
        -:   26:using std::rel_ops::operator<=;
        -:   27:using std::rel_ops::operator>;
        -:   28:using std::rel_ops::operator>=;
        -:   29:
        -:   30:// -------
        -:   31:// destroy
        -:   32:// -------
        -:   33:
        -:   34:template <typename A, typename BI>
function _Z7destroyISaIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SEN8my_dequeIS5_S6_E8iteratorEET0_RT_SA_SA_ called 1 returned 100% blocks executed 100%
function _Z7destroyISaIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SEN8my_dequeIS5_S6_E8iteratorEET0_RT_SA_SA_ called 2 returned 100% blocks executed 100%
function _Z7destroyISaIZN28Deque_Fixture_iterarrow_TestI8my_dequeIiSaIiEEE8TestBodyEvE1SENS1_IS5_S6_E8iteratorEET0_RT_S9_S9_ called 1 returned 100% blocks executed 100%
function _Z7destroyISaIZN34Deque_Fixture_const_iterarrow_TestI8my_dequeIiSaIiEEE8TestBodyEvE1SENS1_IS5_S6_E8iteratorEET0_RT_S9_S9_ called 2 returned 100% blocks executed 100%
function _Z7destroyISaIiEN8my_dequeIiS0_E8iteratorEET0_RT_S4_S4_ called 345 returned 100% blocks executed 100%
      351:   35:BI destroy (A& a, BI b, BI e) {
     3037:   36:    while (b != e) {
call    0 returned 100%
branch  1 taken 67%
branch  2 taken 33% (fallthrough)
call    3 returned 100%
branch  4 taken 67%
branch  5 taken 33% (fallthrough)
call    6 returned 100%
branch  7 taken 67%
branch  8 taken 33% (fallthrough)
call    9 returned 100%
branch 10 taken 67%
branch 11 taken 33% (fallthrough)
call   12 returned 100%
branch 13 taken 87%
branch 14 taken 13% (fallthrough)
     2335:   37:        --e;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
     2335:   38:        a.destroy(&*e);}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
      351:   39:    return b;}
        -:   40:
        -:   41:// ------------------
        -:   42:// uninitialized_copy
        -:   43:// ------------------
        -:   44:
        -:   45:template <typename A, typename II, typename BI>
function _Z18uninitialized_copyISaIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SEN8my_dequeIS5_S6_E14const_iteratorENS8_8iteratorEET1_RT_T0_SE_SB_ called 0 returned 0% blocks executed 0%
function _Z18uninitialized_copyISaIZN28Deque_Fixture_iterarrow_TestI8my_dequeIiSaIiEEE8TestBodyEvE1SENS1_IS5_S6_E14const_iteratorENS7_8iteratorEET1_RT_T0_SD_SA_ called 0 returned 0% blocks executed 0%
function _Z18uninitialized_copyISaIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SEN8my_dequeIS5_S6_E14const_iteratorENS8_8iteratorEET1_RT_T0_SE_SB_ called 1 returned 100% blocks executed 65%
function _Z18uninitialized_copyISaIZN34Deque_Fixture_const_iterarrow_TestI8my_dequeIiSaIiEEE8TestBodyEvE1SENS1_IS5_S6_E14const_iteratorENS7_8iteratorEET1_RT_T0_SD_SA_ called 1 returned 100% blocks executed 65%
function _Z18uninitialized_copyISaIiEN8my_dequeIiS0_E14const_iteratorENS2_8iteratorEET1_RT_T0_S8_S5_ called 64 returned 100% blocks executed 65%
       66:   46:BI uninitialized_copy (A& a, II b, II e, BI x) {
       66:   47:    BI p = x;
        -:   48:    try {
      780:   49:        while (b != e) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 67%
branch 14 taken 33% (fallthrough)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
branch 18 taken 67%
branch 19 taken 33% (fallthrough)
call   20 returned 100%
branch 21 taken 91%
branch 22 taken 9% (fallthrough)
      648:   50:            a.construct(&*x, *b);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
call   24 returned 100%
      648:   51:            ++b;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
      648:   52:            ++x;}}
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
    =====:   53:    catch (...) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    =====:   54:        destroy(a, p, x);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    =====:   55:        throw;}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
       66:   56:    return x;}
        -:   57:
        -:   58:// ------------------
        -:   59:// uninitialized_fill
        -:   60:// ------------------
        -:   61:
        -:   62:template <typename A, typename BI, typename U>
function _Z18uninitialized_fillISaIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SEN8my_dequeIS5_S6_E8iteratorES5_ET0_RT_SA_SA_RKT1_ called 1 returned 100% blocks executed 60%
function _Z18uninitialized_fillISaIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SEN8my_dequeIS5_S6_E8iteratorES5_ET0_RT_SA_SA_RKT1_ called 1 returned 100% blocks executed 60%
function _Z18uninitialized_fillISaIZN28Deque_Fixture_iterarrow_TestI8my_dequeIiSaIiEEE8TestBodyEvE1SENS1_IS5_S6_E8iteratorES5_ET0_RT_S9_S9_RKT1_ called 1 returned 100% blocks executed 60%
function _Z18uninitialized_fillISaIZN34Deque_Fixture_const_iterarrow_TestI8my_dequeIiSaIiEEE8TestBodyEvE1SENS1_IS5_S6_E8iteratorES5_ET0_RT_S9_S9_RKT1_ called 1 returned 100% blocks executed 60%
function _Z18uninitialized_fillISaIiEN8my_dequeIiS0_E8iteratorEiET0_RT_S4_S4_RKT1_ called 198 returned 100% blocks executed 60%
      202:   63:BI uninitialized_fill (A& a, BI b, BI e, const U& v) {
      202:   64:    BI p = b;
        -:   65:    try {
     2073:   66:        while (b != e) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 67%
branch  4 taken 33% (fallthrough)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 67%
branch  9 taken 33% (fallthrough)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 67%
branch 14 taken 33% (fallthrough)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
branch 18 taken 67%
branch 19 taken 33% (fallthrough)
call   20 returned 100%
branch 21 taken 89%
branch 22 taken 11% (fallthrough)
     1669:   67:            a.construct(&*b, v);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
     1669:   68:            ++b;}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
    =====:   69:    catch (...) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    =====:   70:        destroy(a, p, b);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    =====:   71:        throw;}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
      202:   72:    return e;}
        -:   73:
        -:   74:// -------
        -:   75:// my_deque
        -:   76:// -------
        -:   77:
        -:   78:template < typename T, typename A = std::allocator<T> >
        -:   79:class my_deque {
        -:   80:    public:
        -:   81:        // --------
        -:   82:        // typedefs
        -:   83:        // --------
        -:   84:
        -:   85:        typedef A                                           allocator_type;
        -:   86:        typedef typename allocator_type::value_type         value_type;
        -:   87:
        -:   88:        typedef typename allocator_type::size_type          size_type;
        -:   89:        typedef typename allocator_type::difference_type    difference_type;
        -:   90:
        -:   91:        typedef typename allocator_type::pointer            pointer;
        -:   92:        typedef typename allocator_type::const_pointer      const_pointer;
        -:   93:
        -:   94:        typedef typename allocator_type::reference          reference;
        -:   95:        typedef typename allocator_type::const_reference    const_reference;
        -:   96:
        -:   97:        typedef typename A::template rebind<pointer>::other B;
        -:   98:        typedef typename allocator_type::template rebind<T*>::other all_pointer;
        -:   99:
        -:  100:    public:
        -:  101:        // -----------
        -:  102:        // operator ==
        -:  103:        // -----------
        -:  104:
        -:  105:        /**
        -:  106:         * @param two my_deques
        -:  107:         * @return true if they are equal to one another
        -:  108:         */
function _ZeqRK8my_dequeIiSaIiEES3_ called 21 returned 100% blocks executed 100%
       21:  109:        friend bool operator == (const my_deque& lhs, const my_deque& rhs) {
       21:  110:            return (lhs.size() == rhs.size()) && std::equal(lhs.begin(), lhs.end(), rhs.begin());}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 81% (fallthrough)
branch  9 taken 19%
        -:  111:
        -:  112:
        -:  113:        // ----------
        -:  114:        // operator <
        -:  115:        // ----------
        -:  116:
        -:  117:        /**
        -:  118:         * @param take in two mydeques
        -:  119:         * @return true if the left is less than right
        -:  120:         */
function _ZltRK8my_dequeIiSaIiEES3_ called 8 returned 100% blocks executed 100%
        8:  121:        friend bool operator < (const my_deque& lhs, const my_deque& rhs) {
        8:  122:            return std::lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  123:
        -:  124:    private:
        -:  125:        // ----
        -:  126:        // data
        -:  127:        // ----
        -:  128:
        -:  129:        allocator_type _a;
        -:  130:        pointer _lb;  
        -:  131:        pointer _le; 
        -:  132:        pointer _bd; 
        -:  133:        pointer _ed; 
        -:  134:        pointer* _outermost; 
        -:  135:        all_pointer _aP; 
        -:  136:    private:
        -:  137:        // -----
        -:  138:        // valid
        -:  139:        // -----
        -:  140:
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE5validEv called 4 returned 100% blocks executed 64%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE5validEv called 8 returned 100% blocks executed 64%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE5validEv called 4 returned 100% blocks executed 64%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE5validEv called 8 returned 100% blocks executed 64%
function _ZNK8my_dequeIiSaIiEE5validEv called 1229 returned 100% blocks executed 91%
     1253:  141:        bool valid () const {
     1253:  142:            return (!_bd && !_ed && !_lb && !_le) || ((_bd <= _ed) && (_ed <= _le) && (_lb <= _bd));}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 taken 100% (fallthrough)
branch 23 taken 0%
branch 24 taken 100% (fallthrough)
branch 25 taken 0%
branch 26 taken 100% (fallthrough)
branch 27 taken 0%
branch 28 taken 0% (fallthrough)
branch 29 taken 100%
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 taken 100% (fallthrough)
branch 37 taken 0%
branch 38 taken 100% (fallthrough)
branch 39 taken 0%
branch 40 taken 100% (fallthrough)
branch 41 taken 0%
branch 42 taken 0% (fallthrough)
branch 43 taken 100%
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 taken 100% (fallthrough)
branch 51 taken 0%
branch 52 taken 100% (fallthrough)
branch 53 taken 0%
branch 54 taken 100% (fallthrough)
branch 55 taken 0%
branch 56 taken 3% (fallthrough)
branch 57 taken 97%
branch 58 taken 100% (fallthrough)
branch 59 taken 0%
branch 60 taken 100% (fallthrough)
branch 61 taken 0%
branch 62 taken 0% (fallthrough)
branch 63 taken 100%
branch 64 taken 100% (fallthrough)
branch 65 taken 0%
branch 66 taken 100% (fallthrough)
branch 67 taken 0%
branch 68 taken 100% (fallthrough)
branch 69 taken 0%
        -:  143:
        -:  144:public:
        -:  145:        // --------
        -:  146:        // iterator
        -:  147:        // --------
        -:  148:
        -:  149:        class iterator {
        -:  150:            public:
        -:  151:                // --------
        -:  152:                // typedefs
        -:  153:                // --------
        -:  154:
        -:  155:                typedef          std::bidirectional_iterator_tag iterator_category;
        -:  156:                typedef typename my_deque::value_type            value_type;
        -:  157:                typedef typename my_deque::difference_type       difference_type;
        -:  158:                typedef typename my_deque::pointer               pointer;
        -:  159:                typedef typename my_deque::reference             reference;
        -:  160:
        -:  161:            public:
        -:  162:                // -----------
        -:  163:                // operator ==
        -:  164:                // -----------
        -:  165:
        -:  166:                /**
        -:  167:                 * @param take in two iterators
        -:  168:                 * @return true if they are equal
        -:  169:                 */
function _ZeqRKN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorESA_ called 6 returned 100% blocks executed 100%
function _ZeqRKN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorESA_ called 9 returned 100% blocks executed 100%
function _ZeqRKN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorES9_ called 6 returned 100% blocks executed 100%
function _ZeqRKN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorES9_ called 9 returned 100% blocks executed 100%
function _ZeqRKN8my_dequeIiSaIiEE8iteratorES4_ called 4649 returned 100% blocks executed 100%
     4679:  170:                friend bool operator == (const iterator& lhs, const iterator& rhs) {
     4679:  171:                    return lhs._d == rhs._d && lhs._i == rhs._i;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 33% (fallthrough)
branch 11 taken 67%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 33% (fallthrough)
branch 15 taken 67%
branch 16 taken 99% (fallthrough)
branch 17 taken 1%
branch 18 taken 13% (fallthrough)
branch 19 taken 87%
        -:  172:
        -:  173:                /**
        -:  174:                 * @param take in two iterators
        -:  175:                 * @return true if they are not equal
        -:  176:                 */
function _ZneRKN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorESA_ called 6 returned 100% blocks executed 100%
function _ZneRKN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorESA_ called 9 returned 100% blocks executed 100%
function _ZneRKN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorES9_ called 6 returned 100% blocks executed 100%
function _ZneRKN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorES9_ called 9 returned 100% blocks executed 100%
function _ZneRKN8my_dequeIiSaIiEE8iteratorES4_ called 4607 returned 100% blocks executed 100%
     4637:  177:                friend bool operator != (const iterator& lhs, const iterator& rhs) {
     4637:  178:                    return !(lhs == rhs);}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  179:
        -:  180:                // ----------
        -:  181:                // operator +
        -:  182:                // ----------
        -:  183:
        -:  184:                /**
        -:  185:                 * @param iterator
        -:  186:                 * @param difference type
        -:  187:                 * @return the iterator advanced difference_type number of places (sum)
        -:  188:                 */
function _ZplN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorEl called 1 returned 100% blocks executed 100%
function _ZplN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorEl called 2 returned 100% blocks executed 100%
function _ZplN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorEl called 1 returned 100% blocks executed 100%
function _ZplN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorEl called 2 returned 100% blocks executed 100%
function _ZplN8my_dequeIiSaIiEE8iteratorEl called 371 returned 100% blocks executed 100%
      377:  189:                friend iterator operator + (iterator lhs, difference_type rhs) {
      377:  190:                    return lhs += rhs;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  191:
        -:  192:                // ----------
        -:  193:                // operator -
        -:  194:                // ----------
        -:  195:
        -:  196:                /**
        -:  197:                 * @param iterator
        -:  198:                 * @param difference type
        -:  199:                 * @return decremented iterator by number of difference type
        -:  200:                 */
function _ZmiN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorEl called 0 returned 0% blocks executed 0%
function _ZmiN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorEl called 0 returned 0% blocks executed 0%
function _ZmiN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorEl called 0 returned 0% blocks executed 0%
function _ZmiN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorEl called 0 returned 0% blocks executed 0%
function _ZmiN8my_dequeIiSaIiEE8iteratorEl called 37 returned 100% blocks executed 100%
       37:  201:                friend iterator operator - (iterator lhs, difference_type rhs) {
       37:  202:                    return lhs -= rhs;}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
        -:  203:
        -:  204:            private:
        -:  205:                // ----
        -:  206:                // data
        -:  207:                // ----
        -:  208:
        -:  209:                my_deque* _d;
        -:  210:                size_type _i;
        -:  211:
        -:  212:            private:
        -:  213:                // -----
        -:  214:                // valid
        -:  215:                // -----
        -:  216:
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iterator5validEv called 17 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iterator5validEv called 17 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iterator5validEv called 10 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iterator5validEv called 10 returned 100% blocks executed 100%
function _ZNK8my_dequeIiSaIiEE8iterator5validEv called 6502 returned 100% blocks executed 100%
     6556:  217:                bool valid () const {
     6556:  218:                    return (_i >= 0);}
        -:  219:
        -:  220:            public:
        -:  221:                // -----------
        -:  222:                // constructor
        -:  223:                // -----------
        -:  224:
        -:  225:                /**
        -:  226:                 * @param a my deque
        -:  227:                 * @param a size type
        -:  228:                 * set iterator on deque at position given
        -:  229:                 */
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorC2EPS7_m called 7 returned 100% blocks executed 75%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorC2EPS6_m called 7 returned 100% blocks executed 75%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorC2EPS7_m called 5 returned 100% blocks executed 75%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorC2EPS6_m called 5 returned 100% blocks executed 75%
function _ZN8my_dequeIiSaIiEE8iteratorC2EPS1_m called 1329 returned 100% blocks executed 75%
     1353:  230:                iterator (my_deque* d, size_type i = 0){
        -:  231:                    assert(i >= 0);
     1353:  232:                    _d = d;
     1353:  233:                    _i = i;
     1353:  234:                    assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        -:  235:
        -:  236:                // Default copy, destructor, and copy assignment.
        -:  237:                // iterator (const iterator&);
        -:  238:                // ~iterator ();
        -:  239:                // iterator& operator = (const iterator&);
        -:  240:
        -:  241:                // ----------
        -:  242:                // operator *
        -:  243:                // ----------
        -:  244:
        -:  245:                /**
        -:  246:                 * @return a reference to element at that position
        -:  247:                 */
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratordeEv called 10 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratordeEv called 10 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratordeEv called 6 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratordeEv called 6 returned 100% blocks executed 100%
function _ZNK8my_dequeIiSaIiEE8iteratordeEv called 5048 returned 100% blocks executed 100%
     5080:  248:                reference operator * () const {
        -:  249:                    assert(_i >= 0);
     5080:  250:                    return (*_d)[_i];}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  251:
        -:  252:                 // -----------
        -:  253:                // operator ->
        -:  254:                // -----------
        -:  255:
        -:  256:                /**
        -:  257:                 * @param return pointer to this
        -:  258:                 */
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorptEv called 1 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorptEv called 1 returned 100% blocks executed 100%
        2:  259:                pointer operator -> () const {
        2:  260:                    return &**this;}
call    0 returned 100%
call    1 returned 100%
        -:  261:
        -:  262:                // -----------
        -:  263:                // operator ++
        -:  264:                // -----------
        -:  265:
        -:  266:                /**
        -:  267:                 * pre-increment iterator by one to next position
        -:  268:                 */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorppEv called 2 returned 100% blocks executed 80%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorppEv called 4 returned 100% blocks executed 80%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorppEv called 2 returned 100% blocks executed 80%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorppEv called 4 returned 100% blocks executed 80%
function _ZN8my_dequeIiSaIiEE8iteratorppEv called 2415 returned 100% blocks executed 80%
     2427:  269:                iterator& operator ++ () {
     2427:  270:                    ++_i;
     2427:  271:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
     2427:  272:                    return *this;}
        -:  273:
        -:  274:                /**
        -:  275:                 * post-increment iterator by one to next position
        -:  276:                 */
function _ZN8my_dequeIiSaIiEE8iteratorppEi called 3 returned 100% blocks executed 86%
        3:  277:                iterator operator ++ (int) {
        3:  278:                    iterator x = *this;
        3:  279:                    ++(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  280:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  281:                    return x;}
        -:  282:
        -:  283:                // -----------
        -:  284:                // operator --
        -:  285:                // -----------
        -:  286:
        -:  287:                /**
        -:  288:                 * pre-decrement iterator to previous position
        -:  289:                 */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratormmEv called 2 returned 100% blocks executed 80%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratormmEv called 4 returned 100% blocks executed 80%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratormmEv called 2 returned 100% blocks executed 80%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratormmEv called 4 returned 100% blocks executed 80%
function _ZN8my_dequeIiSaIiEE8iteratormmEv called 2335 returned 100% blocks executed 80%
     2347:  290:                iterator& operator -- () {
     2347:  291:                    --_i;
     2347:  292:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
     2347:  293:                    return *this;}
        -:  294:
        -:  295:                /**
        -:  296:                 * post-decrement iterator to previous position
        -:  297:                 */
function _ZN8my_dequeIiSaIiEE8iteratormmEi called 5 returned 100% blocks executed 86%
        5:  298:                iterator operator -- (int) {
        5:  299:                    iterator x = *this;
        5:  300:                    --(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  301:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        5:  302:                    return x;}
        -:  303:
        -:  304:                // -----------
        -:  305:                // operator +=
        -:  306:                // -----------
        -:  307:
        -:  308:                /**
        -:  309:                 * increment iterator by value given
        -:  310:                 */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorpLEl called 1 returned 100% blocks executed 71%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratorpLEl called 2 returned 100% blocks executed 71%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorpLEl called 1 returned 100% blocks executed 71%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratorpLEl called 2 returned 100% blocks executed 71%
function _ZN8my_dequeIiSaIiEE8iteratorpLEl called 374 returned 100% blocks executed 71%
      380:  311:                iterator& operator += (difference_type d) {
      380:  312:                    assert(d >= 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
      380:  313:                    _i += d;
      380:  314:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
      380:  315:                    return *this;}
        -:  316:
        -:  317:                // -----------
        -:  318:                // operator -=
        -:  319:                // -----------
        -:  320:
        -:  321:                /**
        -:  322:                 * decrement iterator by value given
        -:  323:                 */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratormIEl called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE8iteratormIEl called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratormIEl called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE8iteratormIEl called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIiSaIiEE8iteratormIEl called 41 returned 100% blocks executed 71%
       41:  324:                iterator& operator -= (difference_type d) {
       41:  325:                    assert(d>=0);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
       41:  326:                    _i -= d;
       41:  327:                    assert(valid());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
       41:  328:                    return *this;}};
        -:  329:
        -:  330:    public:
        -:  331:        // --------------
        -:  332:        // const_iterator
        -:  333:        // --------------
        -:  334:
        -:  335:        class const_iterator {
        -:  336:            public:
        -:  337:                // --------
        -:  338:                // typedefs
        -:  339:                // --------
        -:  340:
        -:  341:                typedef          std::bidirectional_iterator_tag iterator_category;
        -:  342:                typedef typename my_deque::value_type            value_type;
        -:  343:                typedef typename my_deque::difference_type       difference_type;
        -:  344:                typedef typename my_deque::const_pointer         pointer;
        -:  345:                typedef typename my_deque::const_reference       reference;
        -:  346:
        -:  347:            public:
        -:  348:                // -----------
        -:  349:                // operator ==
        -:  350:                // -----------
        -:  351:
        -:  352:                /**
        -:  353:                 * @param two const iterators
        -:  354:                 * @return true if the iterators are equal
        -:  355:                 */
function _ZeqRKN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorESA_ called 0 returned 0% blocks executed 0%
function _ZeqRKN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorES9_ called 0 returned 0% blocks executed 0%
function _ZeqRKN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorESA_ called 3 returned 100% blocks executed 100%
function _ZeqRKN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorES9_ called 3 returned 100% blocks executed 100%
function _ZeqRKN8my_dequeIiSaIiEE14const_iteratorES4_ called 1337 returned 100% blocks executed 100%
     1343:  356:                friend bool operator == (const const_iterator& lhs, const const_iterator& rhs) {
     1343:  357:                    return (lhs._d == rhs._d) && (lhs._i == rhs._i);}
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 33% (fallthrough)
branch 11 taken 67%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 33% (fallthrough)
branch 15 taken 67%
branch 16 taken 99% (fallthrough)
branch 17 taken 1%
branch 18 taken 9% (fallthrough)
branch 19 taken 91%
        -:  358:
        -:  359:                /**
        -:  360:                 * @param two iterators
        -:  361:                 * @return true if the iterators are not equal
        -:  362:                 */
function _ZneRKN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorESA_ called 0 returned 0% blocks executed 0%
function _ZneRKN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorES9_ called 0 returned 0% blocks executed 0%
function _ZneRKN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorESA_ called 3 returned 100% blocks executed 100%
function _ZneRKN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorES9_ called 3 returned 100% blocks executed 100%
function _ZneRKN8my_dequeIiSaIiEE14const_iteratorES4_ called 1302 returned 100% blocks executed 100%
     1308:  363:                friend bool operator != (const const_iterator& lhs, const const_iterator& rhs) {
     1308:  364:                    return !(lhs == rhs);}
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  365:
        -:  366:                // ----------
        -:  367:                // operator +
        -:  368:                // ----------
        -:  369:
        -:  370:                /**
        -:  371:                 * @param a const iterator
        -:  372:                 * @param a difference type
        -:  373:                 * @return the iterator position advanced
        -:  374:                 */
function _ZplN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorEl called 0 returned 0% blocks executed 0%
function _ZplN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorEl called 0 returned 0% blocks executed 0%
function _ZplN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorEl called 0 returned 0% blocks executed 0%
function _ZplN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorEl called 0 returned 0% blocks executed 0%
function _ZplN8my_dequeIiSaIiEE14const_iteratorEl called 19 returned 100% blocks executed 100%
       19:  375:                friend const_iterator operator + (const_iterator lhs, difference_type rhs) {
       19:  376:                    return lhs += rhs;}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
        -:  377:
        -:  378:                // ----------
        -:  379:                // operator -
        -:  380:                // ----------
        -:  381:
        -:  382:                /**
        -:  383:                 * @param a const iterator
        -:  384:                 * @param difference type
        -:  385:                 * @return iterator decremented by difference type
        -:  386:                 */
function _ZmiN8my_dequeIiSaIiEE14const_iteratorEl called 6 returned 100% blocks executed 100%
        6:  387:                friend const_iterator operator - (const_iterator lhs, difference_type rhs) {
        6:  388:                    return lhs -= rhs;}
call    0 returned 100%
        -:  389:
        -:  390:
        -:  391:            private:
        -:  392:                // ----
        -:  393:                // data
        -:  394:                // ----
        -:  395:
        -:  396:                const my_deque* _d;
        -:  397:
        -:  398:                size_type _i;
        -:  399:
        -:  400:            private:
        -:  401:                // -----
        -:  402:                // valid
        -:  403:                // -----
        -:  404:
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iterator5validEv called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iterator5validEv called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iterator5validEv called 5 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iterator5validEv called 5 returned 100% blocks executed 100%
function _ZNK8my_dequeIiSaIiEE14const_iterator5validEv called 2065 returned 100% blocks executed 100%
     2075:  405:                bool valid () const {
     2075:  406:                    return _i >= 0;}
        -:  407:
        -:  408:          public:
        -:  409:                // -----------
        -:  410:                // constructor
        -:  411:                // -----------
        -:  412:
        -:  413:                /**
        -:  414:                 * @param a const my_deque
        -:  415:                 * @param size_type
        -:  416:                 * @return a const iterator starting at position given for given deque
        -:  417:                 */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorC2EPKS7_m called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorC2EPKS6_m called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorC2EPKS7_m called 3 returned 100% blocks executed 75%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorC2EPKS6_m called 3 returned 100% blocks executed 75%
function _ZN8my_dequeIiSaIiEE14const_iteratorC2EPKS1_m called 279 returned 100% blocks executed 75%
      285:  418:            const_iterator (const my_deque* d, size_type i=0) {
        -:  419:                assert(i>=0);
      285:  420:                _d = d;
      285:  421:                _i = i;
      285:  422:                assert(valid());}
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        -:  423:
        -:  424:                // Default copy, destructor, and copy assignment.
        -:  425:                // const_iterator (const const_iterator&);
        -:  426:                // ~const_iterator ();
        -:  427:                // const_iterator& operator = (const const_iterator&);
        -:  428:
        -:  429:                // ----------
        -:  430:                // operator *
        -:  431:                // ----------
        -:  432:
        -:  433:                /**
        -:  434:                 * @return reference to element at current index
        -:  435:                 */
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratordeEv called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratordeEv called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratordeEv called 3 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratordeEv called 3 returned 100% blocks executed 100%
function _ZNK8my_dequeIiSaIiEE14const_iteratordeEv called 1767 returned 100% blocks executed 100%
     1773:  436:                reference operator * () const {
        -:  437:                    assert(_i >= 0);
     1773:  438:                return (*_d)[_i];}
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  439:
        -:  440:                // -----------
        -:  441:                // operator ->
        -:  442:                // -----------
        -:  443:
        -:  444:                /**
        -:  445:                 * @ return pointer to this
        -:  446:                 */
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorptEv called 1 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorptEv called 1 returned 100% blocks executed 100%
        2:  447:                pointer operator -> () const {
        2:  448:                    return &**this;}
call    0 returned 100%
call    1 returned 100%
        -:  449:
        -:  450:                // -----------
        -:  451:                // operator ++
        -:  452:                // -----------
        -:  453:
        -:  454:                /**
        -:  455:                 * pre-increment
        -:  456:                 * @return const iterator incremented once
        -:  457:                 */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorppEv called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorppEv called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorppEv called 2 returned 100% blocks executed 80%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorppEv called 2 returned 100% blocks executed 80%
function _ZN8my_dequeIiSaIiEE14const_iteratorppEv called 1734 returned 100% blocks executed 80%
     1738:  458:                const_iterator& operator ++ () {
     1738:  459:                ++_i;
     1738:  460:                assert(valid());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
     1738:  461:                return *this;}
        -:  462:
        -:  463:
        -:  464:                /**
        -:  465:                 * post-increment
        -:  466:                 * @return const iterator incremented once
        -:  467:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratorppEi called 3 returned 100% blocks executed 86%
        3:  468:                const_iterator operator ++ (int) {
        3:  469:                    const_iterator x = *this;
        3:  470:                    ++(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  471:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  472:                    return x;}
        -:  473:
        -:  474:                // -----------
        -:  475:                // operator --
        -:  476:                // -----------
        -:  477:
        -:  478:                /**
        -:  479:                 * pre-decrement
        -:  480:                 * @return const iterator decremented once
        -:  481:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratormmEv called 12 returned 100% blocks executed 80%
       12:  482:                const_iterator& operator -- () {
       12:  483:                --_i;
       12:  484:                assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       12:  485:                return *this;}
        -:  486:
        -:  487:                /**
        -:  488:                 * post-decrement
        -:  489:                 * @return const iterator decremented once
        -:  490:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratormmEi called 5 returned 100% blocks executed 86%
        5:  491:                const_iterator operator -- (int) {
        5:  492:                    const_iterator x = *this;
        5:  493:                    --(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  494:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        5:  495:                    return x;}
        -:  496:
        -:  497:                // -----------
        -:  498:                // operator +=
        -:  499:                // -----------
        -:  500:
        -:  501:                /**
        -:  502:                 * @param difference type
        -:  503:                 * @return const iterator incremented by that many
        -:  504:                 */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorpLEl called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE14const_iteratorpLEl called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorpLEl called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE14const_iteratorpLEl called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIiSaIiEE14const_iteratorpLEl called 22 returned 100% blocks executed 71%
       22:  505:                const_iterator& operator += (difference_type d) {
       22:  506:                    assert(d >= 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
       22:  507:                _i += d;
       22:  508:                assert(valid());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
       22:  509:                return *this;}
        -:  510:
        -:  511:                // -----------
        -:  512:                // operator -=
        -:  513:                // -----------
        -:  514:
        -:  515:                /**
        -:  516:                 * @param difference type
        -:  517:                 * @return const iterator decremented by that many
        -:  518:                 */
function _ZN8my_dequeIiSaIiEE14const_iteratormIEl called 10 returned 100% blocks executed 71%
       10:  519:                const_iterator& operator -= (difference_type d) {
       10:  520:                    assert(d>=0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       10:  521:                _i -= d;
       10:  522:                assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       10:  523:                return *this;}};
        -:  524:
        -:  525:    public:
        -:  526:        // ------------
        -:  527:        // constructors
        -:  528:        // ------------
        -:  529:
        -:  530:        /**
        -:  531:         * defaul constructor
        -:  532:         * @param allocator type defaulted
        -:  533:         * set everything to 0
        -:  534:         */
function _ZN8my_dequeIiSaIiEEC2ERKS0_ called 16 returned 100% blocks executed 64%
       16:  535:        explicit my_deque (const allocator_type& a = allocator_type()) 
       16:  536:            : _a(a), _aP() {
call    0 returned 100%
call    1 returned 100%
       16:  537:             _lb = _le = _bd = _ed = 0;
       16:  538:            _outermost = 0;
       16:  539:            assert(_lb == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       16:  540:            assert(_le == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       16:  541:            assert(_bd == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       16:  542:            assert(_ed == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       16:  543:            assert(valid() );}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  544:
        -:  545:        /**
        -:  546:         * constructor with given size
        -:  547:         * split size up into rows and columns
        -:  548:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEC2EmRKS5_RKS6_ called 1 returned 100% blocks executed 51%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEC2EmRKS5_RKS6_ called 1 returned 100% blocks executed 51%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEC2EmRKS4_RKS5_ called 1 returned 100% blocks executed 51%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEC2EmRKS4_RKS5_ called 1 returned 100% blocks executed 51%
function _ZN8my_dequeIiSaIiEEC2EmRKiRKS0_ called 196 returned 100% blocks executed 88%
      200:  549:        explicit my_deque (size_type s, const_reference v = value_type(), const allocator_type& a = allocator_type()) 
      200:  550:            : _a(a), _aP() {
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 returned 100%
call   17 returned 100%
call   18 never executed
call   19 never executed
        -:  551:                assert (s>=0);
      200:  552:            size_type numrows = s / 10;         //divide the size into different rows
        -:  553:            assert(numrows >= 0);
      200:  554:            if (s % 10 > 0){                   //make sure there is no extra space, add an extra row if remainder
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 98% (fallthrough)
branch  9 taken 2%
      196:  555:                ++numrows;
        -:  556:
      196:  557:                _outermost = _aP.allocate(numrows);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
        -:  558:            
      196:  559:                size_type x = 0;
      601:  560:                while (x != numrows){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50% (fallthrough)
branch  8 taken 52%
branch  9 taken 48% (fallthrough)
      209:  561:                    _outermost[x] = _a.allocate(10);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
      209:  562:                    ++x;
        -:  563:                }
        -:  564:
      196:  565:                x = 0;
      601:  566:                while(x != numrows){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50% (fallthrough)
branch  8 taken 52%
branch  9 taken 48% (fallthrough)
      209:  567:                    _a.deallocate(_outermost[x], 10);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      209:  568:                    ++x;
        -:  569:                }
        -:  570:            
      196:  571:                _aP.deallocate(_outermost, numrows);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      196:  572:                _bd = _lb = _a.allocate(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
        -:  573:
      196:  574:                _ed = _le = _bd + s;
        -:  575:
      196:  576:                uninitialized_fill(_a, begin(), end(), v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0% (throw)
call   27 returned 100%
branch 28 taken 100% (fallthrough)
branch 29 taken 0% (throw)
call   30 returned 100%
branch 31 taken 100% (fallthrough)
branch 32 taken 0% (throw)
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 100% (fallthrough)
branch 44 taken 0% (throw)
      196:  577:                assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        -:  578:                }
        -:  579:
        -:  580:            else{
        4:  581:                _outermost = _aP.allocate(numrows);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
        -:  582:            
        4:  583:                size_type x = 0;
      111:  584:                while (x != numrows){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 96%
branch  9 taken 4% (fallthrough)
      103:  585:                    _outermost[x] = _a.allocate(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
      103:  586:                    ++x;
        -:  587:                }
        -:  588:
        4:  589:                x = 0;
      111:  590:                while(x != numrows){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 96%
branch  9 taken 4% (fallthrough)
      103:  591:                    _a.deallocate(_outermost[x], 10);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
      103:  592:                    ++x;
        -:  593:                }
        -:  594:            
        4:  595:                _aP.deallocate(_outermost, numrows);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
        4:  596:                _bd = _lb = _a.allocate(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
        -:  597:
        4:  598:                _ed = _le = _bd + s;
        -:  599:
        4:  600:                uninitialized_fill(_a, begin(), end(), v);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 100% (fallthrough)
branch 44 taken 0% (throw)
        4:  601:                assert(valid());}}
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        -:  602:        /**
        -:  603:         * copy constructor
        -:  604:         * @param my_deque to be copied
        -:  605:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEC2ERKS7_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEC2ERKS6_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEC2ERKS7_ called 1 returned 100% blocks executed 74%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEC2ERKS6_ called 1 returned 100% blocks executed 74%
function _ZN8my_dequeIiSaIiEEC2ERKS1_ called 64 returned 100% blocks executed 74%
       66:  606:        my_deque (const my_deque& that) 
       66:  607:            : _a(that._a), _aP() {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 returned 100%
call   17 returned 100%
call   18 never executed
call   19 never executed
       66:  608:            _outermost = 0; 
       66:  609:            assert(_outermost == 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
       66:  610:            _lb = _bd = _a.allocate(that.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
       66:  611:            _ed = _le = _lb + that.size();
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
       66:  612:            uninitialized_copy(_a, that.begin(), that.end(), begin());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0% (throw)
call   27 returned 100%
branch 28 taken 100% (fallthrough)
branch 29 taken 0% (throw)
call   30 returned 100%
branch 31 taken 100% (fallthrough)
branch 32 taken 0% (throw)
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 100% (fallthrough)
branch 44 taken 0% (throw)
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 100% (fallthrough)
branch 50 taken 0% (throw)
call   51 returned 100%
branch 52 taken 100% (fallthrough)
branch 53 taken 0% (throw)
call   54 returned 100%
branch 55 taken 100% (fallthrough)
branch 56 taken 0% (throw)
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
       66:  613:            assert(valid());}
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        -:  614:
        -:  615:        // ----------
        -:  616:        // destructor
        -:  617:        // ----------
        -:  618:
        -:  619:        /**
        -:  620:         * destructor
        -:  621:         * if not empty, clear and deallocate space
        -:  622:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EED2Ev called 1 returned 100% blocks executed 89%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EED2Ev called 2 returned 100% blocks executed 89%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EED2Ev called 1 returned 100% blocks executed 89%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EED2Ev called 2 returned 100% blocks executed 89%
function _ZN8my_dequeIiSaIiEED2Ev called 276 returned 100% blocks executed 89%
      282:  623:        ~my_deque () {
      282:  624:            if (_lb) {  //check if it's empty.  if not, deallocate entire capacity
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 94% (fallthrough)
branch  9 taken 6%
      266:  625:                clear();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
      266:  626:                _a.deallocate(_lb, (_le - _lb));}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  627:
      282:  628:            assert(valid() );}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
call   21 never executed
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
branch 25 taken 0% (fallthrough)
branch 26 taken 100%
call   27 never executed
call   28 returned 100%
call   29 returned 100%
        -:  629:
        -:  630:        // ----------
        -:  631:        // operator =
        -:  632:        // ----------
        -:  633:
        -:  634:        /**
        -:  635:         * @param my_deque
        -:  636:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEaSERKS7_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEaSERKS7_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEaSERKS6_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEaSERKS6_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIiSaIiEEaSERKS1_ called 5 returned 100% blocks executed 63%
        5:  637:        my_deque& operator = (const my_deque& rhs) {
        5:  638:            if (this == &rhs)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 20% (fallthrough)
branch  9 taken 80%
        1:  639:                return *this;
        4:  640:            if (rhs.size() == size()){
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 returned 100%
call   17 returned 100%
branch 18 taken 25% (fallthrough)
branch 19 taken 75%
        1:  641:                assert(rhs.size()==size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 returned 100%
call   21 returned 100%
branch 22 taken 0% (fallthrough)
branch 23 taken 100%
call   24 never executed
        1:  642:                std::copy(rhs.begin(), rhs.end(), begin());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
        -:  643:            }
        3:  644:            else if (rhs.size() < size()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 returned 100%
call   17 returned 100%
branch 18 taken 33% (fallthrough)
branch 19 taken 67%
        1:  645:                assert(rhs.size()<size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 returned 100%
call   21 returned 100%
branch 22 taken 0% (fallthrough)
branch 23 taken 100%
call   24 never executed
        1:  646:                std::copy(rhs.begin(), rhs.end(), begin());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
        1:  647:                resize(rhs.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 never executed
        -:  648:            }    
        2:  649:            else if (rhs.size() <= (_le - _bd)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####:  650:                assert(rhs.size()<=(_le - _bd));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####:  651:                std::copy(rhs.begin(), rhs.begin() + size(), begin());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####:  652:                _ed = &(*uninitialized_copy(_a, rhs.begin() + size(), rhs.end(), end())); //had to do * & because compiler said canot convert types
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
        -:  653:            }
        -:  654:            else {
        2:  655:                assert(!(rhs.size()==size()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 returned 100%
call   21 returned 100%
branch 22 taken 0% (fallthrough)
branch 23 taken 100%
call   24 never executed
        2:  656:                assert(!(rhs.size()<size()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 returned 100%
call   21 returned 100%
branch 22 taken 0% (fallthrough)
branch 23 taken 100%
call   24 never executed
        2:  657:                assert(!(rhs.size()<=(_le - _bd)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        2:  658:                clear();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
        2:  659:                my_deque x(rhs);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
        2:  660:                swap(x);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
call   24 never executed
        -:  661:            }    
        4:  662:            assert(valid());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        4:  663:            return *this;}
        -:  664:
        -:  665:        // -----------
        -:  666:        // operator []
        -:  667:        // -----------
        -:  668:
        -:  669:        /**
        -:  670:         * @return reference to value at index from beginning of data
        -:  671:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEixEm called 8 returned 100% blocks executed 100%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEixEm called 15 returned 100% blocks executed 100%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEixEm called 8 returned 100% blocks executed 100%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEixEm called 15 returned 100% blocks executed 100%
function _ZN8my_dequeIiSaIiEEixEm called 7261 returned 100% blocks executed 100%
     7307:  672:        reference operator [] (size_type index) {
        -:  673:            assert(index >= 0);
     7307:  674:            return *(_bd + index);}
        -:  675:
        -:  676:        /**
        -:  677:         * @return const reference to value at index from beginning of data
        -:  678:         */
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEixEm called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEixEm called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EEixEm called 3 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EEixEm called 3 returned 100% blocks executed 100%
function _ZNK8my_dequeIiSaIiEEixEm called 1770 returned 100% blocks executed 100%
     1776:  679:        const_reference operator [] (size_type index) const {
        -:  680:            assert(index >= 0);
     1776:  681:            return const_cast<my_deque*>(this)->operator[](index);}
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  682:
        -:  683:        // --
        -:  684:        // at
        -:  685:        // --
        -:  686:
        -:  687:        /**
        -:  688:         * @return reference to value at index
        -:  689:         */
function _ZN8my_dequeIiSaIiEE2atEm called 8 returned 75% blocks executed 71%
        8:  690:        reference at (size_type index) {
        -:  691:            assert(index >= 0);
        8:  692:            if (index >= size())
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        2:  693:                throw std::out_of_range("my_deque");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 returned 0%
call   11 never executed
call   12 never executed
call   13 never executed
        6:  694:            return (*this)[index];}
call    0 returned 100%
        -:  695:
        -:  696:        /**
        -:  697:         * @return const reference to value at index
        -:  698:         */
function _ZNK8my_dequeIiSaIiEE2atEm called 4 returned 75% blocks executed 100%
        4:  699:        const_reference at (size_type index) const {
        -:  700:            assert(index >= 0);
        4:  701:            return const_cast<my_deque*>(this)->at(index);}
call    0 returned 75%
        -:  702:
        -:  703:        // ----
        -:  704:        // back
        -:  705:        // ----
        -:  706:
        -:  707:        /**
        -:  708:         * @return the reference to last element
        -:  709:         * has to be end of data, not end of capacity
        -:  710:         */
function _ZN8my_dequeIiSaIiEE4backEv called 6 returned 100% blocks executed 80%
        6:  711:        reference back () {
        6:  712:            assert(size() > 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        6:  713:            return *(_ed - 1);}
        -:  714:
        -:  715:        /**
        -:  716:         * @return const reference to last element
        -:  717:         */
function _ZNK8my_dequeIiSaIiEE4backEv called 3 returned 100% blocks executed 80%
        3:  718:        const_reference back () const {
        3:  719:            assert(size() > 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  720:            return const_cast<my_deque*>(this)->back();}
call    0 returned 100%
        -:  721:
        -:  722:        // -----
        -:  723:        // begin
        -:  724:        // -----
        -:  725:
        -:  726:        /**
        -:  727:         * @return iterator to beginning position (default)
        -:  728:         */
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE5beginEv called 4 returned 100% blocks executed 100%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE5beginEv called 4 returned 100% blocks executed 100%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE5beginEv called 3 returned 100% blocks executed 100%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE5beginEv called 3 returned 100% blocks executed 100%
function _ZN8my_dequeIiSaIiEE5beginEv called 737 returned 100% blocks executed 100%
      751:  729:        iterator begin () {
      751:  730:            return iterator(this);}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  731:
        -:  732:        /**
        -:  733:         * @return constant iterator to beginning position (default)
        -:  734:         */
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE5beginEv called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE5beginEv called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE5beginEv called 2 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE5beginEv called 2 returned 100% blocks executed 100%
function _ZNK8my_dequeIiSaIiEE5beginEv called 169 returned 100% blocks executed 100%
      173:  735:        const_iterator begin () const {
      173:  736:            return const_iterator(this);}
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:  737:
        -:  738:        // -----
        -:  739:        // clear
        -:  740:        // -----
        -:  741:
        -:  742:        /**
        -:  743:         * resize to 0 to clear all data
        -:  744:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE5clearEv called 1 returned 100% blocks executed 83%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE5clearEv called 2 returned 100% blocks executed 83%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE5clearEv called 1 returned 100% blocks executed 83%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE5clearEv called 2 returned 100% blocks executed 83%
function _ZN8my_dequeIiSaIiEE5clearEv called 265 returned 100% blocks executed 83%
      271:  745:        void clear () {
      271:  746:            resize(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
      271:  747:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        -:  748:
        -:  749:        // -----
        -:  750:        // empty
        -:  751:        // -----
        -:  752:
        -:  753:        /**
        -:  754:         * @return true if my_deque is empty
        -:  755:         */
function _ZNK8my_dequeIiSaIiEE5emptyEv called 16 returned 100% blocks executed 100%
       16:  756:        bool empty () const {
       16:  757:            return size()==0;}
call    0 returned 100%
        -:  758:
        -:  759:        // ---
        -:  760:        // end
        -:  761:        // ---
        -:  762:
        -:  763:        /**
        -:  764:         * @return iterator to the end
        -:  765:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE3endEv called 2 returned 100% blocks executed 100%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE3endEv called 3 returned 100% blocks executed 100%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE3endEv called 2 returned 100% blocks executed 100%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE3endEv called 3 returned 100% blocks executed 100%
function _ZN8my_dequeIiSaIiEE3endEv called 585 returned 100% blocks executed 100%
      595:  766:        iterator end () {
      595:  767:            return iterator(this, size());}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
        -:  768:
        -:  769:        /**
        -:  770:         * @return const iterator to the end
        -:  771:         */
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE3endEv called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE3endEv called 0 returned 0% blocks executed 0%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE3endEv called 1 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE3endEv called 1 returned 100% blocks executed 100%
function _ZNK8my_dequeIiSaIiEE3endEv called 110 returned 100% blocks executed 100%
      112:  772:        const_iterator end () const {
      112:  773:            return const_iterator(this, size());}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
        -:  774:
        -:  775:        // -----
        -:  776:        // erase
        -:  777:        // -----
        -:  778:
        -:  779:        /**
        -:  780:         * <your documentation>
        -:  781:         */
function _ZN8my_dequeIiSaIiEE5eraseENS1_8iteratorE called 4 returned 100% blocks executed 94%
        4:  782:        iterator erase (iterator i) {
        4:  783:            if(i == end()-1){       //if at the last element, just pop it off
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
        1:  784:                pop_back();
call    0 returned 100%
        -:  785:            }
        -:  786:
        -:  787:            else{                    //else copy elements after over curent element, resize
        3:  788:                std::copy(i+1, end(), i);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3:  789:                resize(size()-1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  790:            }
        4:  791:            assert(valid() );
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        4:  792:            return iterator(this);}
call    0 returned 100%
        -:  793:
        -:  794:        // -----
        -:  795:        // front
        -:  796:        // -----
        -:  797:
        -:  798:        /**
        -:  799:         * @return reference to the first element
        -:  800:         */
function _ZN8my_dequeIiSaIiEE5frontEv called 6 returned 100% blocks executed 80%
        6:  801:        reference front () {
        6:  802:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        6:  803:            return *(_bd);}
        -:  804:
        -:  805:        /**
        -:  806:         * @return const reference to first element
        -:  807:         */
function _ZNK8my_dequeIiSaIiEE5frontEv called 3 returned 100% blocks executed 83%
        3:  808:        const_reference front () const {
        3:  809:            assert(!empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  810:            return const_cast<my_deque*>(this)->front();}
call    0 returned 100%
        -:  811:
        -:  812:        // ------
        -:  813:        // insert
        -:  814:        // ------
        -:  815:
        -:  816:        /**
        -:  817:         * @return iterator to given position, but with new value
        -:  818:         */
function _ZN8my_dequeIiSaIiEE6insertENS1_8iteratorERKi called 3 returned 100% blocks executed 88%
        3:  819:        iterator insert (iterator it, const_reference r) {
        3:  820:            if(it == end()){ //if at the end already, just need to push it to the back
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        1:  821:                assert(it == end());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        1:  822:                push_back(r);
call    0 returned 100%
        -:  823:            }
        -:  824:
        2:  825:            else if (it == begin()){   //if at beginning utitlize push_front
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1:  826:                assert(it == begin());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        1:  827:                push_front(r);
call    0 returned 100%
        -:  828:            }
        -:  829:            else{           //have to grow the deque and copy everything, moving it one position down.  insert the value into current position
        1:  830:                assert(!(it==begin()));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
        1:  831:                assert(!(it==end()));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
        1:  832:                value_type v = *(end()-1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
        1:  833:                std::copy(it, end(), it+1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        1:  834:                *it = r;
call    0 returned 100%
        1:  835:                resize(size()+1, v);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  836:            }
        3:  837:            assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:  838:            return iterator(this);}
call    0 returned 100%
        -:  839:
        -:  840:        // ---
        -:  841:        // pop
        -:  842:        // ---
        -:  843:
        -:  844:        /**
        -:  845:         * shrink deque to cut off last element
        -:  846:         */
function _ZN8my_dequeIiSaIiEE8pop_backEv called 25 returned 100% blocks executed 80%
       25:  847:        void pop_back () {
       25:  848:            assert(size() != 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
       25:  849:            resize(size() - 1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       25:  850:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  851:
        -:  852:        /**
        -:  853:         * destroy the first element
        -:  854:         * move pointer of beginning data to next element
        -:  855:         */
function _ZN8my_dequeIiSaIiEE9pop_frontEv called 6 returned 100% blocks executed 82%
        6:  856:        void pop_front () {
        6:  857:            assert(size() != 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        6:  858:            destroy(_a, begin(), begin() + 1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        6:  859:            ++_bd;
        6:  860:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  861:
        -:  862:        // ----
        -:  863:        // push
        -:  864:        // ----
        -:  865:
        -:  866:        /**
        -:  867:         * make size bigger by one and input new value with resize
        -:  868:         */
function _ZN8my_dequeIiSaIiEE9push_backERKi called 6 returned 100% blocks executed 83%
        6:  869:        void push_back (const_reference v) {
        6:  870:            resize(size() + 1, v);
call    0 returned 100%
call    1 returned 100%
        6:  871:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  872:
        -:  873:        /**
        -:  874:         * make sure there is space for element
        -:  875:         * once there is, construct a new space and insert element
        -:  876:         */
function _ZN8my_dequeIiSaIiEE10push_frontERKi called 18 returned 100% blocks executed 92%
       18:  877:        void push_front (const_reference v) {
       18:  878:            if (_bd == _lb) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  879:                resize(size() + 1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       18:  880:                pop_back();
call    0 returned 100%
        -:  881:            }    
       18:  882:            --_bd;
       18:  883:            _a.construct(&*begin(), v); 
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       18:  884:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  885:
        -:  886:        // ------
        -:  887:        // resize
        -:  888:        // ------
        -:  889:
        -:  890:        /**
        -:  891:         * @param size type
        -:  892:         * check to see if possible to fill current deque, or resize
        -:  893:         * if not, make a new deque of the right size and copy elements over, swap
        -:  894:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE6resizeEmRKS5_ called 1 returned 100% blocks executed 21%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE6resizeEmRKS5_ called 2 returned 100% blocks executed 21%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE6resizeEmRKS4_ called 1 returned 100% blocks executed 21%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE6resizeEmRKS4_ called 2 returned 100% blocks executed 21%
function _ZN8my_dequeIiSaIiEE6resizeEmRKi called 324 returned 100% blocks executed 81%
      330:  895:        void resize (size_type s, const_reference v = value_type()) {
      330:  896:            if (s == size()){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 returned 100%
branch 13 taken 2% (fallthrough)
branch 14 taken 98%
        8:  897:                assert(s==size());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
      338:  898:                return;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  899:            }
      322:  900:            if (s < size()){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
branch 13 taken 91% (fallthrough)
branch 14 taken 9%
      295:  901:                assert(s<size());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
      295:  902:                _ed = &(*destroy(_a, begin() + s, end() )); //had to put &* to compile
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
        -:  903:            }
       27:  904:            else if (s <= (_ed -_lb)){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 7% (fallthrough)
branch  9 taken 93%
        2:  905:                assert(s<=(_ed -_lb));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        2:  906:                _ed = &*uninitialized_fill(_a, end(), begin() + s, v);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
        -:  907:            }
        -:  908:            else {              //need to make new, bigger deque but keep all pointers the same
       25:  909:                assert(!(s<=(_ed -_lb)));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
       25:  910:                assert(!(s<size()));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
       25:  911:                assert(!(s==size()));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
       25:  912:                size_type newsize = size() * 2;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
       25:  913:                if (s > newsize){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 52% (fallthrough)
branch  9 taken 48%
       13:  914:                    assert(s>newsize);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
       13:  915:                    newsize = s;
        -:  916:                }
        -:  917:
       25:  918:                if (newsize == s){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 56% (fallthrough)
branch  9 taken 44%
       14:  919:                    assert(s==newsize);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
       14:  920:                    newsize = newsize + 10;
        -:  921:                }
        -:  922:
       25:  923:                size_type middled = (newsize - s) / 2;
       25:  924:                size_type enddata = middled;
        -:  925:
       25:  926:                if ((newsize - s) % 2){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 8% (fallthrough)
branch  9 taken 92%
        2:  927:                    assert((newsize-s)%2);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        2:  928:                    ++enddata;
        -:  929:                }
        -:  930:                
       25:  931:                my_deque x(newsize, v);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
        -:  932:
       25:  933:                std::copy(begin(), end(), x.begin() + middled);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 returned 100%
branch 61 taken 100% (fallthrough)
branch 62 taken 0% (throw)
call   63 returned 100%
branch 64 taken 100% (fallthrough)
branch 65 taken 0% (throw)
call   66 returned 100%
branch 67 taken 100% (fallthrough)
branch 68 taken 0% (throw)
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
branch 73 taken 100% (fallthrough)
branch 74 taken 0% (throw)
        -:  934:
       25:  935:                destroy(x._a, x.begin(), x.begin() + middled);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 returned 100%
branch 49 taken 100% (fallthrough)
branch 50 taken 0% (throw)
call   51 returned 100%
branch 52 taken 100% (fallthrough)
branch 53 taken 0% (throw)
call   54 returned 100%
branch 55 taken 100% (fallthrough)
branch 56 taken 0% (throw)
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
       25:  936:                destroy(x._a, x.end() - enddata, x.end());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 returned 100%
branch 49 taken 100% (fallthrough)
branch 50 taken 0% (throw)
call   51 returned 100%
branch 52 taken 100% (fallthrough)
branch 53 taken 0% (throw)
call   54 returned 100%
branch 55 taken 100% (fallthrough)
branch 56 taken 0% (throw)
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
       25:  937:                x._bd = x._bd + middled;
       25:  938:                x._ed = x._ed - enddata;
        -:  939:
       25:  940:                swap(x);}
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
call   24 never executed
      322:  941:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        -:  942:
        -:  943:        // ----
        -:  944:        // size
        -:  945:        // ----
        -:  946:
        -:  947:        /**
        -:  948:         * @return the distance from beginning of data to end of data
        -:  949:         */
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE4sizeEv called 5 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE4sizeEv called 5 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE4sizeEv called 12 returned 100% blocks executed 100%
function _ZNK8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE4sizeEv called 12 returned 100% blocks executed 100%
function _ZNK8my_dequeIiSaIiEE4sizeEv called 2050 returned 100% blocks executed 100%
     2084:  950:        size_type size () const {
     2084:  951:            return (_ed - _bd);}
        -:  952:
        -:  953:        // ----
        -:  954:        // swap
        -:  955:        // ----
        -:  956:
        -:  957:        /**
        -:  958:         * replace this with that
        -:  959:         * swap all pointers
        -:  960:         */
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE4swapERS7_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestISt5dequeIiSaIiEEE8TestBodyEvE1SSaIS5_EE4swapERS7_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN28Deque_Fixture_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE4swapERS6_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIZN34Deque_Fixture_const_iterarrow_TestIS_IiSaIiEEE8TestBodyEvE1SSaIS4_EE4swapERS6_ called 0 returned 0% blocks executed 0%
function _ZN8my_dequeIiSaIiEE4swapERS1_ called 30 returned 100% blocks executed 57%
       30:  961:        void swap (my_deque& that) {
       30:  962:            if(_a == that._a) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
       30:  963:                assert(_a==that._a);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
       30:  964:                std::swap(_bd, that._bd);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
       30:  965:                std::swap(_lb, that._lb);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
       30:  966:                std::swap(_ed, that._ed);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
       30:  967:                std::swap(_le, that._le);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
        -:  968:            }
        -:  969:            else{
    #####:  970:                my_deque x(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  971:                *this = that;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  972:                that = x;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
        -:  973:            }
       30:  974:            assert(valid() );}};
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
        -:  975:
        -:  976:#endif // Deque_h
