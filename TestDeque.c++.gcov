        -:    0:Source:TestDeque.c++
        -:    0:Graph:TestDeque.gcno
        -:    0:Data:TestDeque.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// --------------------------------
        -:    2:// projects/c++/deque/TestDeque.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// --------------------------------
        -:    6:
        -:    7:// http://www.cplusplus.com/reference/deque/deque/
        -:    8:
        -:    9:// --------
        -:   10:// includes
        -:   11:// --------
        -:   12:
        -:   13:#include <deque>     // deque
        -:   14:#include <stdexcept> // invalid_argument, out_of_range
        -:   15:
        -:   16:#include "gtest/gtest.h"
        -:   17:
        -:   18:#include "Deque.h"
        -:   19:
        -:   20:// -----
        -:   21:// Using
        -:   22:// -----
        -:   23:
        -:   24:using namespace std;
        -:   25:
        -:   26:using testing::Test;
        -:   27:using testing::Types;
        -:   28:
        -:   29:// -----
        -:   30:// Types
        -:   31:// -----
        -:   32:
        -:   33:template <typename T>
function _ZN13Deque_FixtureISt5dequeIiSaIiEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN13Deque_FixtureISt5dequeIiSaIiEEED2Ev called 9 returned 100% blocks executed 75%
function _ZN13Deque_FixtureISt5dequeIiSaIiEEEC2Ev called 9 returned 100% blocks executed 100%
function _ZN13Deque_FixtureI8my_dequeIiSaIiEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN13Deque_FixtureI8my_dequeIiSaIiEEED2Ev called 9 returned 100% blocks executed 75%
function _ZN13Deque_FixtureI8my_dequeIiSaIiEEEC2Ev called 9 returned 100% blocks executed 100%
       36:   34:struct Deque_Fixture : Test {
call    0 never executed
call    1 never executed
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
call   13 returned 100%
        -:   35:    typedef T                               deque_type;
        -:   36:    typedef typename deque_type::value_type value_type;};
        -:   37:
        -:   38:typedef Types<
        -:   39:               deque<int>,
        -:   40:            my_deque<int>>
        -:   41:        deque_types;
        -:   42:
        -:   43:TYPED_TEST_CASE(Deque_Fixture, deque_types);
        -:   44:
        -:   45:// -----
        -:   46:// Tests
        -:   47:// -----
        -:   48:
function _ZN25Deque_Fixture_test_1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 38%
function _ZN25Deque_Fixture_test_1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 39%
function _ZN25Deque_Fixture_test_1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN25Deque_Fixture_test_1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN25Deque_Fixture_test_1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN25Deque_Fixture_test_1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN25Deque_Fixture_test_1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN25Deque_Fixture_test_1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:   49:TYPED_TEST(Deque_Fixture, test_1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:   50:    typedef typename TestFixture::deque_type deque_type;
        -:   51:
        2:   52:    const deque_type x;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
        2:   53:    ASSERT_TRUE(x.empty());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 returned 100%
branch 31 taken 100% (fallthrough)
branch 32 taken 0% (throw)
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 0% (fallthrough)
branch 38 taken 100%
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
call   46 never executed
branch 47 never executed
branch 48 never executed
call   49 never executed
branch 50 never executed
branch 51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 returned 100%
branch 56 taken 100%
branch 57 taken 0%
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
        2:   54:    ASSERT_EQ(x.size(),0);}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 returned 100%
branch 22 taken 100%
branch 23 taken 0%
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 returned 100%
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 0% (fallthrough)
branch 37 taken 100%
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
call   51 never executed
call   52 returned 100%
branch 53 taken 100%
branch 54 taken 0%
call   55 returned 100%
branch 56 taken 100%
branch 57 taken 0%
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
        -:   55:
        -:   56:        // -----------
        -:   57:        // operator ==
        -:   58:        // -----------
        -:   59:
function _ZN27Deque_Fixture_equalop1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN27Deque_Fixture_equalop1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN27Deque_Fixture_equalop1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:   60:        TYPED_TEST(Deque_Fixture, equalop1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:   61:            typedef typename TestFixture::deque_type deque_type;
        -:   62:
        2:   63:            deque_type x(1); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:   64:            x[1];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:   65:            deque_type y(1); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:   66:            y[1];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:   67:
        4:   68:            ASSERT_TRUE(x == y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:   69:        }
        -:   70:
function _ZN27Deque_Fixture_equalop2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 58%
function _ZN27Deque_Fixture_equalop2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 56%
function _ZN27Deque_Fixture_equalop2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:   71:        TYPED_TEST(Deque_Fixture, equalop2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:   72:            typedef typename TestFixture::deque_type deque_type;
        -:   73:
        2:   74:            deque_type x(4); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:   75:            x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   76:            x[1] = 4; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   77:            x[2] = 3; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   78:            x[3] = 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:   79:            deque_type y(10); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:   80:            y[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   81:            y[1] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   82:            y[2] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   83:            y[3] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   84:            y[4] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   85:            y[5] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   86:            y[6] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   87:            y[7] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   88:            y[8] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   89:            y[9] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:   90:            ASSERT_FALSE(x == y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:   91:        }
        -:   92:
function _ZN27Deque_Fixture_equalop3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN27Deque_Fixture_equalop3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN27Deque_Fixture_equalop3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:   93:        TYPED_TEST(Deque_Fixture, equalop3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:   94:            typedef typename TestFixture::deque_type deque_type;
        -:   95:
        2:   96:            deque_type x;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
        4:   97:            deque_type y(3); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:   98:            y[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   99:            y[1] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  100:            y[2] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  101:            ASSERT_FALSE(x == y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
        -:  102:        }
        -:  103:       
        -:  104:
        -:  105:		// ----------
        -:  106:        // operator <
        -:  107:        // ----------
        -:  108:
        -:  109:       
function _ZN30Deque_Fixture_lessthanop1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 46%
function _ZN30Deque_Fixture_lessthanop1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 45%
function _ZN30Deque_Fixture_lessthanop1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  110:        TYPED_TEST(Deque_Fixture, lessthanop1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  111:            typedef typename TestFixture::deque_type deque_type;
        -:  112:
        2:  113:            deque_type x(4); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  114:            x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  115:            x[1] = 4; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  116:            x[2] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  117:            x[3] = 4;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  118:            deque_type y(4); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  119:            y[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  120:            y[1] = 4; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  121:            y[2] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  122:            y[3] = 4;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  123:
        2:  124:            ASSERT_FALSE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
        4:  125:            ASSERT_TRUE(x == y);}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  126:
function _ZN30Deque_Fixture_lessthanop2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 52%
function _ZN30Deque_Fixture_lessthanop2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN30Deque_Fixture_lessthanop2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  127:        TYPED_TEST(Deque_Fixture, lessthanop2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  128:            typedef typename TestFixture::deque_type deque_type;
        -:  129:
        2:  130:            deque_type x(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  131:            x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  132:            x[1] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  133:            x[2] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  134:            deque_type y(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  135:            y[0] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  136:            y[1] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  137:            y[2] = 6;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  138:
        4:  139:            ASSERT_TRUE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  140:        }
        -:  141:
function _ZN30Deque_Fixture_lessthanop3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN30Deque_Fixture_lessthanop3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_lessthanop3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  142:        TYPED_TEST(Deque_Fixture, lessthanop3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  143:            typedef typename TestFixture::deque_type deque_type;
        -:  144:
        2:  145:            deque_type x(1); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  146:            x[0] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  147:            deque_type y(3); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  148:            y[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  149:            y[1] = 4; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  150:            y[2] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  151:            ASSERT_TRUE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  152:        }
        -:  153:
        -:  154:
function _ZN30Deque_Fixture_lessthanop4_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN30Deque_Fixture_lessthanop4_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_lessthanop4_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop4_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop4_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop4_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop4_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop4_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  155:        TYPED_TEST(Deque_Fixture, lessthanop4) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  156:            typedef typename TestFixture::deque_type deque_type;
        -:  157:
        2:  158:            deque_type x(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:  159:            x[0] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  160:            x[2] = 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  161:            x[3] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  162:            deque_type y;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
        4:  163:            ASSERT_FALSE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  164:        }
        -:  165:
function _ZN30Deque_Fixture_lessthanop5_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_lessthanop5_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN30Deque_Fixture_lessthanop5_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop5_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop5_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop5_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop5_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop5_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  166:        TYPED_TEST(Deque_Fixture, lessthanop5) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  167:            typedef typename TestFixture::deque_type deque_type;
        -:  168:
        2:  169:            deque_type x(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        4:  170:            deque_type y(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  171:            x[0] = 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  172:            y[0] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  173:            ASSERT_FALSE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
function _GLOBAL__sub_I_gtest_Deque_Fixture_test_1_registered_ called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  174:        }
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  175:		// --------
        -:  176:        // iterator
        -:  177:        // --------
        -:  178:
        -:  179:                // -----------
        -:  180:                // operator ==
        -:  181:                // -----------
        -:  182:
        -:  183:               /* NEED TO CHANGE THESE
        -:  184:               TYPED_TEST(Deque_Fixture, iter_equal1) {
        -:  185:                    typedef typename TestFixture::deque_type deque_type;
        -:  186:
        -:  187:                    deque_type x(5); x[0] = 1; x[1] = 4;
        -:  188:                    deque_type y(5); y[0] = 1; y[1] = 3;
        -:  189:
        -:  190:                    typename deque_type::iterator x_b = x.begin();
        -:  191:                    typename deque_type::iterator y_b = y.begin();
        -:  192:
        -:  193:                    ASSERT_FALSE(x_b == y_b);
        -:  194:                }
        -:  195:
        -:  196:                TYPED_TEST(Deque_Fixture, iter_equal2) {
        -:  197:                    typedef typename TestFixture::deque_type deque_type;
        -:  198:
        -:  199:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  200:                    deque_type y(2); y[0] = 1; y[1] = 3;
        -:  201:
        -:  202:                    typename deque_type::iterator x_b = x.begin();
        -:  203:                    typename deque_type::iterator y_b = y.begin();
        -:  204:
        -:  205:                    ++x_b;
        -:  206:                    ++y_b;
        -:  207:
        -:  208:                    ASSERT_FALSE(x_b == y_b);
        -:  209:                }
        -:  210:
        -:  211:                TYPED_TEST(Deque_Fixture, iter_equal3) {
        -:  212:                    typedef typename TestFixture::deque_type deque_type;
        -:  213:
        -:  214:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  215:
        -:  216:                    typename deque_type::iterator x_b = x.begin();
        -:  217:                    typename deque_type::iterator x_e = x.end();
        -:  218:
        -:  219:                    ++x_b;
        -:  220:                    ++x_b;
        -:  221:
        -:  222:                    ASSERT_TRUE(x_b == x_e);
        -:  223:                }*/
        -:  224:// -----------
        -:  225:                // operator !=
        -:  226:                // -----------
        -:  227:
        -:  228:               /* TYPED_TEST(Deque_Fixture, iter_inequality_op_test_1) {
        -:  229:                    typedef typename TestFixture::deque_type deque_type;
        -:  230:
        -:  231:                    deque_type x(5); x[0] = 1; x[1] = 4;
        -:  232:                    deque_type y(5); y[0] = 1; y[1] = 3;
        -:  233:
        -:  234:                    typename deque_type::iterator x_b = x.begin();
        -:  235:                    typename deque_type::iterator y_b = y.begin();
        -:  236:
        -:  237:                    ASSERT_TRUE(x_b != y_b);
        -:  238:                }
        -:  239:
        -:  240:                TYPED_TEST(Deque_Fixture, iter_inequality_op_test_2) {
        -:  241:                    typedef typename TestFixture::deque_type deque_type;
        -:  242:
        -:  243:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  244:                    deque_type y(2); y[0] = 1; y[1] = 3;
        -:  245:
        -:  246:                    typename deque_type::iterator x_b = x.begin();
        -:  247:                    typename deque_type::iterator y_b = y.begin();
        -:  248:
        -:  249:                    ++x_b;
        -:  250:                    ++y_b;
        -:  251:
        -:  252:                    ASSERT_TRUE(x_b != y_b);
        -:  253:                }
        -:  254:
        -:  255:                TYPED_TEST(Deque_Fixture, iter_inequality_op_test_3) {
        -:  256:                    typedef typename TestFixture::deque_type deque_type;
        -:  257:
        -:  258:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  259:
        -:  260:                    typename deque_type::iterator x_b = x.begin();
        -:  261:                    typename deque_type::iterator x_e = x.end();
        -:  262:
        -:  263:                    ++x_b;
        -:  264:                    ++x_b;
        -:  265:
        -:  266:                    ASSERT_FALSE(x_b != x_e);
        -:  267:                }*/
        -:  268: 				// ----------
        -:  269:                // operator +
        -:  270:                // ----------
        -:  271:
        -:  272:                /* Need to change these
        -:  273:                TYPED_TEST(Deque_Fixture, iter_plus_op_test_1) {
        -:  274:                    typedef typename TestFixture::deque_type deque_type;
        -:  275:
        -:  276:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  277:
        -:  278:                    typename deque_type::iterator x_b1 = x.begin();
        -:  279:                    typename deque_type::iterator x_b2 = x_b1;
        -:  280:
        -:  281:                    ++x_b1;
        -:  282:
        -:  283:                    ASSERT_TRUE(x_b1 == x_b2 + 1);
        -:  284:                }
        -:  285:
        -:  286:                TYPED_TEST(Deque_Fixture, iter_plus_op_test_2) {
        -:  287:                    typedef typename TestFixture::deque_type deque_type;
        -:  288:
        -:  289:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  290:
        -:  291:                    typename deque_type::iterator x_b1 = x.begin();
        -:  292:
        -:  293:                    ASSERT_TRUE(x_b1 + 2 == x.end());
        -:  294:                }
        -:  295:
        -:  296:                TYPED_TEST(Deque_Fixture, iter_plus_op_test_3) {
        -:  297:                    typedef typename TestFixture::deque_type deque_type;
        -:  298:
        -:  299:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  300:
        -:  301:                    typename deque_type::iterator x_b1 = x.begin();
        -:  302:
        -:  303:                    ASSERT_FALSE(x_b1 + 1 == x.begin());
        -:  304:                }
        -:  305:
        -:  306:                TYPED_TEST(Deque_Fixture, iter_plus_op_test_4) {
        -:  307:                    typedef typename TestFixture::deque_type deque_type;
        -:  308:
        -:  309:                    deque_type _x(100, 10); _x[24] = 1;
        -:  310:
        -:  311:                    const deque_type x = _x;
        -:  312:
        -:  313:                    typename deque_type::const_iterator x_b1 = x.begin() + 24;
        -:  314:
        -:  315:                    ASSERT_EQ(*x_b1, 1);
        -:  316:                }
        -:  317:*/
        -:  318:                /*Need to change these
        -:  319:                // ----------
        -:  320:                // operator -
        -:  321:                // ----------
        -:  322:
        -:  323:                TYPED_TEST(Deque_Fixture, iter_minus_op_test_1) {
        -:  324:                    typedef typename TestFixture::deque_type deque_type;
        -:  325:
        -:  326:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  327:
        -:  328:                    typename deque_type::iterator x_b1 = x.end();
        -:  329:                    typename deque_type::iterator x_b2 = x.begin() + 1;
        -:  330:
        -:  331:                    ASSERT_TRUE(x_b1 - 1 == x_b2);
        -:  332:                }
        -:  333:
        -:  334:                TYPED_TEST(Deque_Fixture, iter_minus_op_test_2) {
        -:  335:                    typedef typename TestFixture::deque_type deque_type;
        -:  336:
        -:  337:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  338:
        -:  339:                    typename deque_type::iterator x_b1 = x.end();
        -:  340:                    typename deque_type::iterator x_b2 = x.begin();
        -:  341:
        -:  342:                    ASSERT_TRUE(x_b1 - 2 == x_b2);
        -:  343:                }
        -:  344:
        -:  345:                TYPED_TEST(Deque_Fixture, iter_minus_op_test_3) {
        -:  346:                    typedef typename TestFixture::deque_type deque_type;
        -:  347:
        -:  348:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  349:
        -:  350:                    typename deque_type::iterator x_b1 = x.end();
        -:  351:                    typename deque_type::iterator x_b2 = x.begin();
        -:  352:
        -:  353:                    ASSERT_FALSE(x_b1 - 1 == x_b2);
        -:  354:                }
        -:  355:
        -:  356:                TYPED_TEST(Deque_Fixture, iter_minus_op_test_4) {
        -:  357:                    typedef typename TestFixture::deque_type deque_type;
        -:  358:
        -:  359:                    deque_type x(92, 31); x[50] = 1;
        -:  360:
        -:  361:                    typename deque_type::iterator x_b1 = x.end();
        -:  362:
        -:  363:                    ASSERT_EQ(*(x_b1 - 42), 1);
        -:  364:                }*/
        -:  365:
        -:  366:				/*NEED TO CHANGE THESE
        -:  367:				// ----------
        -:  368:                // operator *
        -:  369:                // ----------
        -:  370:
        -:  371:                TYPED_TEST(Deque_Fixture, iter_deref_op_test_1) {
        -:  372:                    typedef typename TestFixture::deque_type deque_type;
        -:  373:
        -:  374:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  375:
        -:  376:                    typename deque_type::iterator x_b1 = x.begin();
        -:  377:
        -:  378:                    ASSERT_EQ(*x_b1, 1);
        -:  379:                }
        -:  380:
        -:  381:                TYPED_TEST(Deque_Fixture, iter_deref_op_test_2) {
        -:  382:                    typedef typename TestFixture::deque_type deque_type;
        -:  383:
        -:  384:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  385:
        -:  386:                    typename deque_type::iterator x_b1 = x.begin();
        -:  387:
        -:  388:                    ++x_b1;
        -:  389:
        -:  390:                    ASSERT_EQ(*x_b1, 4);
        -:  391:                }
        -:  392:
        -:  393:                TYPED_TEST(Deque_Fixture, iter_deref_op_test_3) {
        -:  394:                    typedef typename TestFixture::deque_type deque_type;
        -:  395:
        -:  396:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  397:
        -:  398:                    typename deque_type::iterator x_b1 = x.end();
        -:  399:
        -:  400:                    --x_b1;
        -:  401:
        -:  402:                    ASSERT_EQ(*x_b1, 4);
        -:  403:                }*/
        -:  404:
        -:  405:				/*NEED TO CHANGE THESE
        -:  406:				// -----------
        -:  407:                // operator ->
        -:  408:                // -----------
        -:  409:
        -:  410:                TYPED_TEST(Deque_Fixture, my_iter_arrow_op_test_1) {
        -:  411:                    struct S {
        -:  412:                        int a;
        -:  413:                        int b;
        -:  414:                    };
        -:  415:
        -:  416:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -:  417:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -:  418:
        -:  419:                    my_deque<S> x(2); 
        -:  420:                    x[0] = s_a;
        -:  421:                    x[1] = s_b;
        -:  422:
        -:  423:                    auto x_b1 = x.begin();
        -:  424:
        -:  425:                    ASSERT_EQ(x_b1->a, 1);
        -:  426:                }
        -:  427:
        -:  428:                TYPED_TEST(Deque_Fixture, my_iter_arrow_op_test_2) {
        -:  429:                    struct S {
        -:  430:                        int a;
        -:  431:                        int b;
        -:  432:                    };
        -:  433:
        -:  434:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -:  435:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -:  436:
        -:  437:                    my_deque<S> x(2); 
        -:  438:                    x[0] = s_a;
        -:  439:                    x[1] = s_b;
        -:  440:
        -:  441:                    auto x_b1 = x.begin();
        -:  442:
        -:  443:                    ASSERT_EQ(x_b1->b, 3);
        -:  444:                }
        -:  445:
        -:  446:                TYPED_TEST(Deque_Fixture, my_iter_arrow_op_test_3) {
        -:  447:                    struct S {
        -:  448:                        int a;
        -:  449:                        int b;
        -:  450:                    };
        -:  451:
        -:  452:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -:  453:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -:  454:
        -:  455:                    my_deque<S> x(2); 
        -:  456:                    x[0] = s_a;
        -:  457:                    x[1] = s_b;
        -:  458:
        -:  459:                    auto x_b1 = x.begin(); ++x_b1;
        -:  460:
        -:  461:                    ASSERT_EQ(x_b1->b, 7);
        -:  462:                }
        -:  463:
        -:  464:                TYPED_TEST(Deque_Fixture, iter_arrow_op_test_1) {
        -:  465:                    struct S {
        -:  466:                        int a;
        -:  467:                        int b;
        -:  468:                    };
        -:  469:
        -:  470:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -:  471:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -:  472:
        -:  473:                    deque<S> x(2); 
        -:  474:                    x[0] = s_a;
        -:  475:                    x[1] = s_b;
        -:  476:
        -:  477:                    auto x_b1 = x.begin();
        -:  478:
        -:  479:                    ASSERT_EQ(x_b1->a, 1);
        -:  480:                }
        -:  481:
        -:  482:                TYPED_TEST(Deque_Fixture, iter_arrow_op_test_2) {
        -:  483:                    struct S {
        -:  484:                        int a;
        -:  485:                        int b;
        -:  486:                    };
        -:  487:
        -:  488:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -:  489:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -:  490:
        -:  491:                    deque<S> x(2); 
        -:  492:                    x[0] = s_a;
        -:  493:                    x[1] = s_b;
        -:  494:
        -:  495:                    auto x_b1 = x.begin();
        -:  496:
        -:  497:                    ASSERT_EQ(x_b1->b, 3);
        -:  498:                }
        -:  499:
        -:  500:                TYPED_TEST(Deque_Fixture, iter_arrow_op_test_3) {
        -:  501:                    struct S {
        -:  502:                        int a;
        -:  503:                        int b;
        -:  504:                    };
        -:  505:
        -:  506:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -:  507:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -:  508:
        -:  509:                    deque<S> x(2); 
        -:  510:                    x[0] = s_a;
        -:  511:                    x[1] = s_b;
        -:  512:
        -:  513:                    auto x_b1 = x.begin(); ++x_b1;
        -:  514:
        -:  515:                    ASSERT_EQ(x_b1->b, 7);
        -:  516:                }
        -:  517:
        -:  518:                // -----------
        -:  519:                // operator ++
        -:  520:                // -----------
        -:  521:                
        -:  522:                TYPED_TEST(Deque_Fixture, iter_pre_incr_op_test_1) {
        -:  523:                    typedef typename TestFixture::deque_type deque_type;
        -:  524:
        -:  525:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  526:
        -:  527:                    typename deque_type::iterator x_b1 = x.begin();
        -:  528:                    typename deque_type::iterator x_b2 = x_b1 + 1;
        -:  529:
        -:  530:                    ++x_b1;
        -:  531:
        -:  532:                    ASSERT_TRUE(x_b1 == x_b2);
        -:  533:                }
        -:  534:
        -:  535:                TYPED_TEST(Deque_Fixture, iter_pre_incr_op_test_2) {
        -:  536:                    typedef typename TestFixture::deque_type deque_type;
        -:  537:
        -:  538:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  539:
        -:  540:                    typename deque_type::iterator x_b1 = x.begin();
        -:  541:                    typename deque_type::iterator x_b2 = x_b1;
        -:  542:
        -:  543:                    ++x_b1;
        -:  544:
        -:  545:                    ASSERT_FALSE(x_b1 == x_b2);
        -:  546:                }
        -:  547:
        -:  548:                TYPED_TEST(Deque_Fixture, iter_pre_incr_op_test_3) {
        -:  549:                    typedef typename TestFixture::deque_type deque_type;
        -:  550:
        -:  551:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  552:
        -:  553:                    typename deque_type::iterator x_b1 = x.begin();
        -:  554:
        -:  555:                    ++x_b1;
        -:  556:                    ++x_b1;
        -:  557:
        -:  558:                    ASSERT_TRUE(x_b1 == x.end());
        -:  559:                }
        -:  560:
        -:  561:                // (prefix and postfix)
        -:  562:
        -:  563:                TYPED_TEST(Deque_Fixture, iter_post_incr_op_test_1) {
        -:  564:                    typedef typename TestFixture::deque_type deque_type;
        -:  565:
        -:  566:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  567:
        -:  568:                    typename deque_type::iterator x_b1 = x.begin();
        -:  569:                    typename deque_type::iterator x_b2 = x_b1 + 1;
        -:  570:
        -:  571:                    x_b1++;
        -:  572:
        -:  573:                    ASSERT_TRUE(x_b1 == x_b2);
        -:  574:                }
        -:  575:
        -:  576:                TYPED_TEST(Deque_Fixture, iter_post_incr_op_test_2) {
        -:  577:                    typedef typename TestFixture::deque_type deque_type;
        -:  578:
        -:  579:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  580:
        -:  581:                    typename deque_type::iterator x_b1 = x.begin();
        -:  582:                    typename deque_type::iterator x_b2 = x_b1 + 1;
        -:  583:
        -:  584:                    ASSERT_FALSE(x_b1++ == x_b2);
        -:  585:                }
        -:  586:
        -:  587:                TYPED_TEST(Deque_Fixture, iter_post_incr_op_test_3) {
        -:  588:                    typedef typename TestFixture::deque_type deque_type;
        -:  589:
        -:  590:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  591:
        -:  592:                    typename deque_type::iterator x_b1 = x.begin();
        -:  593:
        -:  594:                    x_b1++;
        -:  595:                    x_b1++;
        -:  596:
        -:  597:                    ASSERT_TRUE(x_b1 == x.end());
        -:  598:                }
        -:  599:
        -:  600:                // -----------
        -:  601:                // operator --
        -:  602:                // -----------
        -:  603:
        -:  604:                TYPED_TEST(Deque_Fixture, iter_pre_decr_op_test_1) {
        -:  605:                    typedef typename TestFixture::deque_type deque_type;
        -:  606:
        -:  607:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  608:
        -:  609:                    typename deque_type::iterator x_b1 = x.end();
        -:  610:                    typename deque_type::iterator x_b2 = x_b1 - 1;
        -:  611:
        -:  612:                    --x_b1;
        -:  613:
        -:  614:                    ASSERT_TRUE(x_b1 == x_b2);
        -:  615:                }
        -:  616:
        -:  617:                TYPED_TEST(Deque_Fixture, iter_pre_decr_op_test_2) {
        -:  618:                    typedef typename TestFixture::deque_type deque_type;
        -:  619:
        -:  620:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  621:
        -:  622:                    typename deque_type::iterator x_b1 = x.begin();
        -:  623:                    typename deque_type::iterator x_b2 = x.end();
        -:  624:
        -:  625:                    --x_b2;
        -:  626:
        -:  627:                    ASSERT_FALSE(x_b1 == x_b2);
        -:  628:                }
        -:  629:
        -:  630:                TYPED_TEST(Deque_Fixture, iter_pre_decr_op_test_3) {
        -:  631:                    typedef typename TestFixture::deque_type deque_type;
        -:  632:
        -:  633:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  634:
        -:  635:                    typename deque_type::iterator x_b1 = x.begin();
        -:  636:                    typename deque_type::iterator x_b2 = x.end();
        -:  637:
        -:  638:                    --x_b2;
        -:  639:
        -:  640:                    ASSERT_TRUE(x_b1 == --x_b2);
        -:  641:                }
        -:  642:
        -:  643:                // (prefix and postfix)
        -:  644:
        -:  645:                TYPED_TEST(Deque_Fixture, iter_post_decr_op_test_1) {
        -:  646:                    typedef typename TestFixture::deque_type deque_type;
        -:  647:
        -:  648:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  649:
        -:  650:                    typename deque_type::iterator x_b1 = x.end();
        -:  651:                    typename deque_type::iterator x_b2 = x_b1 - 1;
        -:  652:
        -:  653:                    x_b1--;
        -:  654:
        -:  655:                    ASSERT_TRUE(x_b1 == x_b2);
        -:  656:                }
        -:  657:
        -:  658:                TYPED_TEST(Deque_Fixture, iter_post_decr_op_test_2) {
        -:  659:                    typedef typename TestFixture::deque_type deque_type;
        -:  660:
        -:  661:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  662:
        -:  663:                    typename deque_type::iterator x_b1 = x.end();
        -:  664:                    typename deque_type::iterator x_b2 = x_b1 - 2;
        -:  665:
        -:  666:                    x_b2--;
        -:  667:
        -:  668:                    ASSERT_FALSE(x_b2-- == x_b1);
        -:  669:                }
        -:  670:
        -:  671:                TYPED_TEST(Deque_Fixture, iter_post_decr_op_test_3) {
        -:  672:                    typedef typename TestFixture::deque_type deque_type;
        -:  673:
        -:  674:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  675:
        -:  676:                    typename deque_type::iterator x_b1 = x.end();
        -:  677:                    typename deque_type::iterator x_b2 = x_b1 - 2;
        -:  678:
        -:  679:                    x_b1--;
        -:  680:                    x_b1--;
        -:  681:
        -:  682:                    ASSERT_TRUE(x_b1 == x_b2);
        -:  683:                }
        -:  684:
        -:  685:                // -----------
        -:  686:                // operator +=
        -:  687:                // -----------
        -:  688:
        -:  689:                TYPED_TEST(Deque_Fixture, iter_plus_op_equal_test_1) {
        -:  690:                    typedef typename TestFixture::deque_type deque_type;
        -:  691:
        -:  692:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  693:
        -:  694:                    typename deque_type::iterator x_b1 = x.begin();
        -:  695:                    typename deque_type::iterator x_b2 = x_b1;
        -:  696:
        -:  697:                    x_b1 += 1;
        -:  698:
        -:  699:                    ASSERT_TRUE(x_b1 == x_b2 + 1);
        -:  700:                }
        -:  701:
        -:  702:                TYPED_TEST(Deque_Fixture, iter_plus_op_equal_test_2) {
        -:  703:                    typedef typename TestFixture::deque_type deque_type;
        -:  704:
        -:  705:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  706:
        -:  707:                    typename deque_type::iterator x_b1 = x.begin();
        -:  708:
        -:  709:                    x_b1 += 2;
        -:  710:
        -:  711:                    ASSERT_TRUE(x_b1 == x.end());
        -:  712:                }
        -:  713:
        -:  714:                TYPED_TEST(Deque_Fixture, iter_plus_op_equal_test_3) {
        -:  715:                    typedef typename TestFixture::deque_type deque_type;
        -:  716:
        -:  717:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  718:
        -:  719:                    typename deque_type::iterator x_b1 = x.begin();
        -:  720:
        -:  721:                    x_b1 += 1;
        -:  722:
        -:  723:                    ASSERT_FALSE(x_b1 == x.begin());
        -:  724:                }
        -:  725:
        -:  726:                TYPED_TEST(Deque_Fixture, iter_plus_op_equal_test_4) {
        -:  727:                    typedef typename TestFixture::deque_type deque_type;
        -:  728:
        -:  729:                    deque_type x(1000); x[324] = 42;
        -:  730:
        -:  731:                    typename deque_type::iterator x_b1 = x.begin();
        -:  732:
        -:  733:                    x_b1 += 324;
        -:  734:
        -:  735:                    ASSERT_EQ(*x_b1, 42);
        -:  736:                }
        -:  737:
        -:  738:
        -:  739:                // -----------
        -:  740:                // operator -=
        -:  741:                // -----------
        -:  742:
        -:  743:                TYPED_TEST(Deque_Fixture, iter_minus_equal_op_test_1) {
        -:  744:                    typedef typename TestFixture::deque_type deque_type;
        -:  745:
        -:  746:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  747:
        -:  748:                    typename deque_type::iterator x_b1 = x.end();
        -:  749:                    typename deque_type::iterator x_b2 = x.begin() + 1;
        -:  750:
        -:  751:                    x_b1 -= 1;
        -:  752:
        -:  753:                    ASSERT_TRUE(x_b1 == x_b2);
        -:  754:                }
        -:  755:
        -:  756:                TYPED_TEST(Deque_Fixture, iter_minus_equal_op_test_2) {
        -:  757:                    typedef typename TestFixture::deque_type deque_type;
        -:  758:
        -:  759:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  760:
        -:  761:                    typename deque_type::iterator x_b1 = x.end();
        -:  762:                    typename deque_type::iterator x_b2 = x.begin();
        -:  763:
        -:  764:                    x_b1 -= 2;
        -:  765:
        -:  766:                    ASSERT_TRUE(x_b1 == x_b2);
        -:  767:                }
        -:  768:
        -:  769:                TYPED_TEST(Deque_Fixture, iter_minus_equal_op_test_3) {
        -:  770:                    typedef typename TestFixture::deque_type deque_type;
        -:  771:
        -:  772:                    deque_type x(2); x[0] = 1; x[1] = 4;
        -:  773:
        -:  774:                    typename deque_type::iterator x_b1 = x.end();
        -:  775:                    typename deque_type::iterator x_b2 = x.begin();
        -:  776:
        -:  777:                    x_b1 -= 1;
        -:  778:
        -:  779:                    ASSERT_FALSE(x_b1 == x_b2);
        -:  780:                }
        -:  781:*/
        -:  782:
        -:  783:                        // --------------
        -:  784:        // const_iterator
        -:  785:        // --------------
        -:  786:
        -:  787:                // -----------
        -:  788:                // operator ==
        -:  789:                // -----------
        -:  790:/*
        -:  791:                TYPED_TEST(Deque_Fixture, const_iter_equality_op_test_1) {
        -:  792:                    typedef typename TestFixture::deque_type deque_type;
        -:  793:
        -:  794:                    deque_type _x(5); _x[0] = 1; _x[1] = 4;
        -:  795:                    deque_type _y(5); _y[0] = 1; _y[1] = 3;
        -:  796:
        -:  797:                    const deque_type x = _x;
        -:  798:                    const deque_type y = _y;
        -:  799:
        -:  800:                    typename deque_type::const_iterator x_b = x.begin();
        -:  801:                    typename deque_type::const_iterator y_b = y.begin();
        -:  802:
        -:  803:                    ASSERT_FALSE(x_b == y_b);
        -:  804:                }
        -:  805:
        -:  806:                TYPED_TEST(Deque_Fixture, const_iter_equality_op_test_2) {
        -:  807:                    typedef typename TestFixture::deque_type deque_type;
        -:  808:
        -:  809:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  810:                    deque_type _y(2); _y[0] = 1; _y[1] = 3;
        -:  811:
        -:  812:                    const deque_type x = _x;
        -:  813:                    const deque_type y = _y;
        -:  814:
        -:  815:                    typename deque_type::const_iterator x_b = x.begin();
        -:  816:                    typename deque_type::const_iterator y_b = y.begin();
        -:  817:
        -:  818:                    ++x_b;
        -:  819:                    ++y_b;
        -:  820:
        -:  821:                    ASSERT_FALSE(x_b == y_b);
        -:  822:                }
        -:  823:
        -:  824:                TYPED_TEST(Deque_Fixture, const_iter_equality_op_test_3) {
        -:  825:                    typedef typename TestFixture::deque_type deque_type;
        -:  826:
        -:  827:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  828:
        -:  829:                    const deque_type x = _x;
        -:  830:
        -:  831:                    typename deque_type::const_iterator x_b = x.begin();
        -:  832:                    typename deque_type::const_iterator x_e = x.end();
        -:  833:
        -:  834:                    ++x_b;
        -:  835:                    ++x_b;
        -:  836:
        -:  837:                    ASSERT_TRUE(x_b == x_e);
        -:  838:                }
        -:  839:
        -:  840:                // -----------
        -:  841:                // operator !=
        -:  842:                // -----------
        -:  843:
        -:  844:                TYPED_TEST(Deque_Fixture, const_iter_inequality_op_test_1) {
        -:  845:                    typedef typename TestFixture::deque_type deque_type;
        -:  846:
        -:  847:                    deque_type _x(5); _x[0] = 1; _x[1] = 4;
        -:  848:                    deque_type _y(5); _y[0] = 1; _y[1] = 3;
        -:  849:
        -:  850:                    const deque_type x = _x;
        -:  851:                    const deque_type y = _y;
        -:  852:
        -:  853:                    typename deque_type::const_iterator x_b = x.begin();
        -:  854:                    typename deque_type::const_iterator y_b = y.begin();
        -:  855:
        -:  856:                    ASSERT_TRUE(x_b != y_b);
        -:  857:                }
        -:  858:
        -:  859:                TYPED_TEST(Deque_Fixture, const_iter_inequality_op_test_2) {
        -:  860:                    typedef typename TestFixture::deque_type deque_type;
        -:  861:
        -:  862:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  863:                    deque_type _y(2); _y[0] = 1; _y[1] = 3;
        -:  864:
        -:  865:                    const deque_type x = _x;
        -:  866:                    const deque_type y = _y;
        -:  867:
        -:  868:                    typename deque_type::const_iterator x_b = x.begin();
        -:  869:                    typename deque_type::const_iterator y_b = y.begin();
        -:  870:
        -:  871:                    ++x_b;
        -:  872:                    ++y_b;
        -:  873:
        -:  874:                    ASSERT_TRUE(x_b != y_b);
        -:  875:                }
        -:  876:
        -:  877:                TYPED_TEST(Deque_Fixture, const_iter_inequality_op_test_3) {
        -:  878:                    typedef typename TestFixture::deque_type deque_type;
        -:  879:
        -:  880:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  881:
        -:  882:                    const deque_type x = _x;
        -:  883:
        -:  884:                    typename deque_type::const_iterator x_b = x.begin();
        -:  885:                    typename deque_type::const_iterator x_e = x.end();
        -:  886:
        -:  887:                    ++x_b;
        -:  888:                    ++x_b;
        -:  889:
        -:  890:                    ASSERT_FALSE(x_b != x_e);
        -:  891:                }
        -:  892:*/
        -:  893:              /*NEED TO CHANGE THESE 
        -:  894:                // ----------
        -:  895:                // operator +
        -:  896:                // ----------
        -:  897:
        -:  898:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_test_1) {
        -:  899:                    typedef typename TestFixture::deque_type deque_type;
        -:  900:
        -:  901:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  902:
        -:  903:                    const deque_type x = _x;
        -:  904:
        -:  905:                    typename deque_type::const_iterator x_b1 = x.begin();
        -:  906:                    typename deque_type::const_iterator x_b2 = x_b1;
        -:  907:
        -:  908:                    ++x_b1;
        -:  909:
        -:  910:                    ASSERT_TRUE(x_b1 == x_b2 + 1);
        -:  911:                }
        -:  912:
        -:  913:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_test_2) {
        -:  914:                    typedef typename TestFixture::deque_type deque_type;
        -:  915:
        -:  916:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  917:
        -:  918:                    const deque_type x = _x;
        -:  919:
        -:  920:                    typename deque_type::const_iterator x_b1 = x.begin();
        -:  921:
        -:  922:                    ASSERT_TRUE(x_b1 + 2 == x.end());
        -:  923:                }
        -:  924:
        -:  925:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_test_3) {
        -:  926:                    typedef typename TestFixture::deque_type deque_type;
        -:  927:
        -:  928:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  929:
        -:  930:                    const deque_type x = _x;
        -:  931:
        -:  932:                    typename deque_type::const_iterator x_b1 = x.begin();
        -:  933:
        -:  934:                    ASSERT_FALSE(x_b1 + 1 == x.begin());
        -:  935:                }
        -:  936:
        -:  937:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_test_4) {
        -:  938:                    typedef typename TestFixture::deque_type deque_type;
        -:  939:
        -:  940:                    deque_type _x(29); _x[24] = 1; _x[1] = 4;
        -:  941:
        -:  942:                    const deque_type x = _x;
        -:  943:
        -:  944:                    typename deque_type::const_iterator x_b1 = x.begin() + 24;
        -:  945:
        -:  946:                    ASSERT_EQ(*x_b1, 1);
        -:  947:                }
        -:  948:
        -:  949:                // ----------
        -:  950:                // operator -
        -:  951:                // ----------
        -:  952:
        -:  953:                TYPED_TEST(Deque_Fixture, const_iter_minus_op_test_1) {
        -:  954:                    typedef typename TestFixture::deque_type deque_type;
        -:  955:
        -:  956:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  957:
        -:  958:                    const deque_type x = _x;
        -:  959:
        -:  960:                    typename deque_type::const_iterator x_b1 = x.end();
        -:  961:                    typename deque_type::const_iterator x_b2 = x.begin() + 1;
        -:  962:
        -:  963:                    ASSERT_TRUE(x_b1 - 1 == x_b2);
        -:  964:                }
        -:  965:
        -:  966:                TYPED_TEST(Deque_Fixture, const_iter_minus_op_test_2) {
        -:  967:                    typedef typename TestFixture::deque_type deque_type;
        -:  968:
        -:  969:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  970:
        -:  971:                    const deque_type x = _x;
        -:  972:
        -:  973:                    typename deque_type::const_iterator x_b1 = x.end();
        -:  974:                    typename deque_type::const_iterator x_b2 = x.begin();
        -:  975:
        -:  976:                    ASSERT_TRUE(x_b1 - 2 == x_b2);
        -:  977:                }
        -:  978:
        -:  979:                TYPED_TEST(Deque_Fixture, const_iter_minus_op_test_3) {
        -:  980:                    typedef typename TestFixture::deque_type deque_type;
        -:  981:
        -:  982:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  983:
        -:  984:                    const deque_type x = _x;
        -:  985:
        -:  986:                    typename deque_type::const_iterator x_b1 = x.end();
        -:  987:                    typename deque_type::const_iterator x_b2 = x.begin();
        -:  988:
        -:  989:                    ASSERT_FALSE(x_b1 - 1 == x_b2);
        -:  990:                }
        -:  991:
        -:  992:                TYPED_TEST(Deque_Fixture, const_iter_minus_op_test_4) {
        -:  993:                    typedef typename TestFixture::deque_type deque_type;
        -:  994:
        -:  995:                    deque_type _x(92, 31); _x[50] = 1;
        -:  996:
        -:  997:                    const deque_type x = _x;
        -:  998:
        -:  999:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1000:
        -: 1001:                    ASSERT_EQ(*(x_b1 - 42), 1);
        -: 1002:                }*/
        -: 1003:                /* NEED TO CHANGE THESE    
        -: 1004:				// ----------
        -: 1005:                // operator *
        -: 1006:                // ----------
        -: 1007:
        -: 1008:                TYPED_TEST(Deque_Fixture, const_iter_deref_op_test_1) {
        -: 1009:                    typedef typename TestFixture::deque_type deque_type;
        -: 1010:
        -: 1011:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1012:
        -: 1013:                    const deque_type x = _x;
        -: 1014:
        -: 1015:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1016:
        -: 1017:                    ASSERT_EQ(*x_b1, 1);
        -: 1018:                }
        -: 1019:
        -: 1020:                TYPED_TEST(Deque_Fixture, const_iter_deref_op_test_2) {
        -: 1021:                    typedef typename TestFixture::deque_type deque_type;
        -: 1022:
        -: 1023:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1024:
        -: 1025:                    const deque_type x = _x;
        -: 1026:
        -: 1027:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1028:
        -: 1029:                    ++x_b1;
        -: 1030:
        -: 1031:                    ASSERT_EQ(*x_b1, 4);
        -: 1032:                }
        -: 1033:
        -: 1034:                TYPED_TEST(Deque_Fixture, const_iter_deref_op_test_3) {
        -: 1035:                    typedef typename TestFixture::deque_type deque_type;
        -: 1036:
        -: 1037:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1038:
        -: 1039:                    const deque_type x = _x;
        -: 1040:
        -: 1041:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1042:
        -: 1043:                    --x_b1;
        -: 1044:
        -: 1045:                    ASSERT_EQ(*x_b1, 4);
        -: 1046:                }
        -: 1047:
        -: 1048:                // -----------
        -: 1049:                // operator ->
        -: 1050:                // -----------
        -: 1051:
        -: 1052:                TYPED_TEST(Deque_Fixture, const_iter_arrow_op_test_1) {
        -: 1053:                    struct S {
        -: 1054:                        int a;
        -: 1055:                        int b;
        -: 1056:                    };
        -: 1057:
        -: 1058:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -: 1059:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -: 1060:
        -: 1061:                    deque<S> _x(2); 
        -: 1062:                    _x[0] = s_a;
        -: 1063:                    _x[1] = s_b;
        -: 1064:
        -: 1065:                    const deque<S> x = _x;
        -: 1066:
        -: 1067:                    auto x_b1 = x.begin();
        -: 1068:
        -: 1069:                    ASSERT_EQ(x_b1->a, 1);
        -: 1070:                }
        -: 1071:
        -: 1072:                TYPED_TEST(Deque_Fixture, const_iter_arrow_op_test_2) {
        -: 1073:                    struct S {
        -: 1074:                        int a;
        -: 1075:                        int b;
        -: 1076:                    };
        -: 1077:
        -: 1078:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -: 1079:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -: 1080:
        -: 1081:                    deque<S> _x(2); 
        -: 1082:                    _x[0] = s_a;
        -: 1083:                    _x[1] = s_b;
        -: 1084:
        -: 1085:                    const deque<S> x = _x;
        -: 1086:
        -: 1087:                    auto x_b1 = x.begin();
        -: 1088:
        -: 1089:                    ASSERT_EQ(x_b1->b, 3);
        -: 1090:                }
        -: 1091:
        -: 1092:                TYPED_TEST(Deque_Fixture, const_iter_arrow_op_test_3) {
        -: 1093:                    struct S {
        -: 1094:                        int a;
        -: 1095:                        int b;
        -: 1096:                    };
        -: 1097:
        -: 1098:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -: 1099:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -: 1100:
        -: 1101:                    deque<S> _x(2); 
        -: 1102:                    _x[0] = s_a;
        -: 1103:                    _x[1] = s_b;
        -: 1104:
        -: 1105:                    const deque<S> x = _x;
        -: 1106:
        -: 1107:                    auto x_b1 = x.begin(); ++x_b1;
        -: 1108:
        -: 1109:                    ASSERT_EQ(x_b1->b, 7);
        -: 1110:                }*/
        -: 1111:
        -: 1112:/* 			NEED TO CHANGE THESE
        -: 1113:				// -----------
        -: 1114:                // operator ++
        -: 1115:                // -----------
        -: 1116:                
        -: 1117:                TYPED_TEST(Deque_Fixture, const_iter_pre_incr_op_test_1) {
        -: 1118:                    typedef typename TestFixture::deque_type deque_type;
        -: 1119:
        -: 1120:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1121:
        -: 1122:                    const deque_type x = _x;
        -: 1123:
        -: 1124:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1125:                    typename deque_type::const_iterator x_b2 = x_b1 + 1;
        -: 1126:
        -: 1127:                    ++x_b1;
        -: 1128:
        -: 1129:                    ASSERT_TRUE(x_b1 == x_b2);
        -: 1130:                }
        -: 1131:
        -: 1132:                TYPED_TEST(Deque_Fixture, const_iter_pre_incr_op_test_2) {
        -: 1133:                    typedef typename TestFixture::deque_type deque_type;
        -: 1134:
        -: 1135:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1136:
        -: 1137:                    const deque_type x = _x;
        -: 1138:
        -: 1139:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1140:                    typename deque_type::const_iterator x_b2 = x_b1;
        -: 1141:
        -: 1142:                    ++x_b1;
        -: 1143:
        -: 1144:                    ASSERT_FALSE(x_b1 == x_b2);
        -: 1145:                }
        -: 1146:
        -: 1147:                TYPED_TEST(Deque_Fixture, const_iter_pre_incr_op_test_3) {
        -: 1148:                    typedef typename TestFixture::deque_type deque_type;
        -: 1149:
        -: 1150:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1151:
        -: 1152:                    const deque_type x = _x;
        -: 1153:
        -: 1154:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1155:
        -: 1156:                    ++x_b1;
        -: 1157:                    ++x_b1;
        -: 1158:
        -: 1159:                    ASSERT_TRUE(x_b1 == x.end());
        -: 1160:                }
        -: 1161:
        -: 1162:                // (prefix and postfix)
        -: 1163:
        -: 1164:                TYPED_TEST(Deque_Fixture, const_iter_post_incr_op_test_1) {
        -: 1165:                    typedef typename TestFixture::deque_type deque_type;
        -: 1166:
        -: 1167:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1168:
        -: 1169:                    const deque_type x = _x;
        -: 1170:
        -: 1171:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1172:                    typename deque_type::const_iterator x_b2 = x_b1 + 1;
        -: 1173:
        -: 1174:                    x_b1++;
        -: 1175:
        -: 1176:                    ASSERT_TRUE(x_b1 == x_b2);
        -: 1177:                }
        -: 1178:
        -: 1179:                TYPED_TEST(Deque_Fixture, const_iter_post_incr_op_test_2) {
        -: 1180:                    typedef typename TestFixture::deque_type deque_type;
        -: 1181:
        -: 1182:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1183:
        -: 1184:                    const deque_type x = _x;
        -: 1185:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1186:                    typename deque_type::const_iterator x_b2 = x_b1 + 1;
        -: 1187:
        -: 1188:                    ASSERT_FALSE(x_b1++ == x_b2);
        -: 1189:                }
        -: 1190:
        -: 1191:                TYPED_TEST(Deque_Fixture, const_iter_post_incr_op_test_3) {
        -: 1192:                    typedef typename TestFixture::deque_type deque_type;
        -: 1193:
        -: 1194:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1195:
        -: 1196:                    const deque_type x = _x;
        -: 1197:
        -: 1198:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1199:
        -: 1200:                    x_b1++;
        -: 1201:                    x_b1++;
        -: 1202:
        -: 1203:                    ASSERT_TRUE(x_b1 == x.end());
        -: 1204:                }
        -: 1205:
        -: 1206:                // -----------
        -: 1207:                // operator --
        -: 1208:                // -----------
        -: 1209:                
        -: 1210:                TYPED_TEST(Deque_Fixture, const_iter_pre_decr_op_test_1) {
        -: 1211:                    typedef typename TestFixture::deque_type deque_type;
        -: 1212:
        -: 1213:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1214:
        -: 1215:                    const deque_type x = _x;
        -: 1216:
        -: 1217:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1218:                    typename deque_type::const_iterator x_b2 = x_b1 - 1;
        -: 1219:
        -: 1220:                    --x_b1;
        -: 1221:
        -: 1222:                    ASSERT_TRUE(x_b1 == x_b2);
        -: 1223:                }
        -: 1224:
        -: 1225:                TYPED_TEST(Deque_Fixture, const_iter_pre_decr_op_test_2) {
        -: 1226:                    typedef typename TestFixture::deque_type deque_type;
        -: 1227:
        -: 1228:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1229:
        -: 1230:                    const deque_type x = _x;
        -: 1231:
        -: 1232:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1233:                    typename deque_type::const_iterator x_b2 = x.end();
        -: 1234:
        -: 1235:                    --x_b2;
        -: 1236:
        -: 1237:                    ASSERT_FALSE(x_b1 == x_b2);
        -: 1238:                }
        -: 1239:
        -: 1240:                TYPED_TEST(Deque_Fixture, const_iter_pre_decr_op_test_3) {
        -: 1241:                    typedef typename TestFixture::deque_type deque_type;
        -: 1242:
        -: 1243:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1244:
        -: 1245:                    const deque_type x = _x;
        -: 1246:
        -: 1247:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1248:                    typename deque_type::const_iterator x_b2 = x.end();
        -: 1249:
        -: 1250:                    --x_b2;
        -: 1251:
        -: 1252:                    ASSERT_TRUE(x_b1 == --x_b2);
        -: 1253:                }
        -: 1254:
        -: 1255:                // (prefix and postfix)
        -: 1256:
        -: 1257:                TYPED_TEST(Deque_Fixture, const_iter_post_decr_op_test_1) {
        -: 1258:                    typedef typename TestFixture::deque_type deque_type;
        -: 1259:
        -: 1260:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1261:
        -: 1262:                    const deque_type x = _x;
        -: 1263:
        -: 1264:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1265:                    typename deque_type::const_iterator x_b2 = x_b1 - 1;
        -: 1266:
        -: 1267:                    x_b1--;
        -: 1268:
        -: 1269:                    ASSERT_TRUE(x_b1 == x_b2);
        -: 1270:                }
        -: 1271:
        -: 1272:                TYPED_TEST(Deque_Fixture, const_iter_post_decr_op_test_2) {
        -: 1273:                    typedef typename TestFixture::deque_type deque_type;
        -: 1274:
        -: 1275:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1276:
        -: 1277:                    const deque_type x = _x;
        -: 1278:
        -: 1279:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1280:                    typename deque_type::const_iterator x_b2 = x_b1 - 2;
        -: 1281:
        -: 1282:                    x_b2--;
        -: 1283:
        -: 1284:                    ASSERT_FALSE(x_b2-- == x_b1);
        -: 1285:                }
        -: 1286:
        -: 1287:                TYPED_TEST(Deque_Fixture, const_iter_post_decr_op_test_3) {
        -: 1288:                    typedef typename TestFixture::deque_type deque_type;
        -: 1289:
        -: 1290:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1291:
        -: 1292:                    const deque_type x = _x;
        -: 1293:
        -: 1294:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1295:                    typename deque_type::const_iterator x_b2 = x_b1 - 2;
        -: 1296:
        -: 1297:                    x_b1--;
        -: 1298:                    x_b1--;
        -: 1299:
        -: 1300:                    ASSERT_TRUE(x_b1 == x_b2);
        -: 1301:                }
        -: 1302:
        -: 1303:                // -----------
        -: 1304:                // operator +=
        -: 1305:                // -----------
        -: 1306:
        -: 1307:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_equal_test_1) {
        -: 1308:                    typedef typename TestFixture::deque_type deque_type;
        -: 1309:
        -: 1310:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1311:
        -: 1312:                    const deque_type x = _x;
        -: 1313:
        -: 1314:
        -: 1315:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1316:                    typename deque_type::const_iterator x_b2 = x_b1;
        -: 1317:
        -: 1318:                    x_b1 += 1;
        -: 1319:
        -: 1320:                    ASSERT_TRUE(x_b1 == x_b2 + 1);
        -: 1321:                }
        -: 1322:
        -: 1323:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_equal_test_2) {
        -: 1324:                    typedef typename TestFixture::deque_type deque_type;
        -: 1325:
        -: 1326:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1327:
        -: 1328:                    const deque_type x = _x;
        -: 1329:
        -: 1330:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1331:
        -: 1332:                    x_b1 += 2;
        -: 1333:
        -: 1334:                    ASSERT_TRUE(x_b1 == x.end());
        -: 1335:                }
        -: 1336:
        -: 1337:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_equal_test_3) {
        -: 1338:                    typedef typename TestFixture::deque_type deque_type;
        -: 1339:
        -: 1340:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1341:
        -: 1342:                    const deque_type x = _x;
        -: 1343:
        -: 1344:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1345:
        -: 1346:                    x_b1 += 1;
        -: 1347:
        -: 1348:                    ASSERT_FALSE(x_b1 == x.begin());
        -: 1349:                }
        -: 1350:
        -: 1351:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_equal_test_4) {
        -: 1352:                    typedef typename TestFixture::deque_type deque_type;
        -: 1353:
        -: 1354:                    deque_type _x(100, 10); _x[24] = 1;
        -: 1355:
        -: 1356:                    const deque_type x = _x;
        -: 1357:
        -: 1358:                    typename deque_type::const_iterator x_b1 = x.begin();
        -: 1359:
        -: 1360:                    x_b1 += 24;
        -: 1361:
        -: 1362:                    ASSERT_EQ(*x_b1, 1);
        -: 1363:                }
        -: 1364:
        -: 1365:
        -: 1366:                // -----------
        -: 1367:                // operator -=
        -: 1368:                // -----------
        -: 1369:
        -: 1370:                TYPED_TEST(Deque_Fixture, const_iter_minus_equal_op_test_1) {
        -: 1371:                    typedef typename TestFixture::deque_type deque_type;
        -: 1372:
        -: 1373:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1374:
        -: 1375:                    const deque_type x = _x;
        -: 1376:
        -: 1377:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1378:                    typename deque_type::const_iterator x_b2 = x.begin() + 1;
        -: 1379:
        -: 1380:                    x_b1 -= 1;
        -: 1381:
        -: 1382:                    ASSERT_TRUE(x_b1 == x_b2);
        -: 1383:                }
        -: 1384:
        -: 1385:                TYPED_TEST(Deque_Fixture, const_iter_minus_equal_op_test_2) {
        -: 1386:                    typedef typename TestFixture::deque_type deque_type;
        -: 1387:
        -: 1388:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1389:
        -: 1390:                    const deque_type x = _x;
        -: 1391:
        -: 1392:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1393:                    typename deque_type::const_iterator x_b2 = x.begin();
        -: 1394:
        -: 1395:                    x_b1 -= 2;
        -: 1396:
        -: 1397:                    ASSERT_TRUE(x_b1 == x_b2);
        -: 1398:                }
        -: 1399:
        -: 1400:                TYPED_TEST(Deque_Fixture, const_iter_minus_equal_op_test_3) {
        -: 1401:                    typedef typename TestFixture::deque_type deque_type;
        -: 1402:
        -: 1403:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1404:
        -: 1405:                    const deque_type x = _x;
        -: 1406:
        -: 1407:                    typename deque_type::const_iterator x_b1 = x.end();
        -: 1408:                    typename deque_type::const_iterator x_b2 = x.begin();
        -: 1409:
        -: 1410:                    x_b1 -= 1;
        -: 1411:
        -: 1412:                    ASSERT_FALSE(x_b1 == x_b2);
        -: 1413:                }
        -: 1414:*/
        -: 1415:    // --------
        -: 1416:    // my_deque
        -: 1417:    // --------
        -: 1418:/*   NEED TO CHANGE THESE
        -: 1419:        // ----------
        -: 1420:        // operator =
        -: 1421:        // ----------
        -: 1422:
        -: 1423:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_1) {
        -: 1424:            typedef typename TestFixture::deque_type deque_type;
        -: 1425:
        -: 1426:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1427:            deque_type y = x;
        -: 1428:            ASSERT_EQ(x,y);
        -: 1429:        }
        -: 1430:
        -: 1431:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_2) {
        -: 1432:            typedef typename TestFixture::deque_type deque_type;
        -: 1433:
        -: 1434:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1435:            deque_type y(4);
        -: 1436:            y = x;
        -: 1437:            x[0] = 20;
        -: 1438:            ASSERT_TRUE(x != y);
        -: 1439:        }
        -: 1440:
        -: 1441:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_3) {
        -: 1442:            typedef typename TestFixture::deque_type deque_type;
        -: 1443:
        -: 1444:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1445:            deque_type y = x;
        -: 1446:            y[0] = 20;
        -: 1447:            ASSERT_TRUE(x != y);
        -: 1448:        }
        -: 1449:
        -: 1450:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_4) {
        -: 1451:            typedef typename TestFixture::deque_type deque_type;
        -: 1452:
        -: 1453:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1454:            deque_type y;
        -: 1455:            x = y;
        -: 1456:            ASSERT_EQ(x,y);
        -: 1457:        }
        -: 1458:
        -: 1459:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_5) {
        -: 1460:            typedef typename TestFixture::deque_type deque_type;
        -: 1461:
        -: 1462:            deque_type x(100, 10);
        -: 1463:            deque_type y(2);
        -: 1464:            x = y;
        -: 1465:            ASSERT_EQ(x,y);
        -: 1466:        }
        -: 1467:
        -: 1468:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_6) {
        -: 1469:            typedef typename TestFixture::deque_type deque_type;
        -: 1470:
        -: 1471:            deque_type x(100, 10);
        -: 1472:            deque_type y(2);
        -: 1473:            y = x;
        -: 1474:            ASSERT_EQ(x,y);
        -: 1475:        }
        -: 1476:*/
        -: 1477:
        -: 1478:
        -: 1479:/*NEED TO CHANGE THESE
        -: 1480:		// -----------
        -: 1481:        // operator []
        -: 1482:        // -----------
        -: 1483:
        -: 1484:        TYPED_TEST(Deque_Fixture, deque_index_op_test_1) {
        -: 1485:            typedef typename TestFixture::deque_type deque_type;
        -: 1486:
        -: 1487:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1488:            ASSERT_EQ(x[0],1);
        -: 1489:        }
        -: 1490:
        -: 1491:        TYPED_TEST(Deque_Fixture, deque_index_op_test_2) {
        -: 1492:            typedef typename TestFixture::deque_type deque_type;
        -: 1493:
        -: 1494:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1495:            ASSERT_EQ(x[1],2);
        -: 1496:        }
        -: 1497:
        -: 1498:        TYPED_TEST(Deque_Fixture, deque_index_op_test_3) {
        -: 1499:            typedef typename TestFixture::deque_type deque_type;
        -: 1500:
        -: 1501:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1502:            ASSERT_EQ(x[2],3);
        -: 1503:        }
        -: 1504:
        -: 1505:        // reference and const_reference
        -: 1506:
        -: 1507:        TYPED_TEST(Deque_Fixture, const_deque_index_op_test_1) {
        -: 1508:            typedef typename TestFixture::deque_type deque_type;
        -: 1509:
        -: 1510:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1511:            const deque_type y = x;
        -: 1512:            ASSERT_EQ(y[0],1);
        -: 1513:        }
        -: 1514:
        -: 1515:        TYPED_TEST(Deque_Fixture, const_deque_index_op_test_2) {
        -: 1516:            typedef typename TestFixture::deque_type deque_type;
        -: 1517:
        -: 1518:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1519:            const deque_type y = x;
        -: 1520:            ASSERT_EQ(y[1],2);
        -: 1521:        }
        -: 1522:
        -: 1523:        TYPED_TEST(Deque_Fixture, const_deque_index_op_test_3) {
        -: 1524:            typedef typename TestFixture::deque_type deque_type;
        -: 1525:
        -: 1526:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1527:            const deque_type y = x;
        -: 1528:            ASSERT_EQ(y[2],3);
        -: 1529:        }
        -: 1530:
        -: 1531:        // --
        -: 1532:        // at
        -: 1533:        // --
        -: 1534:
        -: 1535:        TYPED_TEST(Deque_Fixture, deque_at_op_test_1) {
        -: 1536:            typedef typename TestFixture::deque_type deque_type;
        -: 1537:
        -: 1538:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1539:            ASSERT_EQ(x.at(0),1);
        -: 1540:        }
        -: 1541:
        -: 1542:        TYPED_TEST(Deque_Fixture, deque_at_op_test_2) {
        -: 1543:            typedef typename TestFixture::deque_type deque_type;
        -: 1544:
        -: 1545:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1546:            ASSERT_EQ(x.at(1),2);
        -: 1547:        }
        -: 1548:
        -: 1549:        TYPED_TEST(Deque_Fixture, deque_at_op_test_3) {
        -: 1550:            typedef typename TestFixture::deque_type deque_type;
        -: 1551:
        -: 1552:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1553:            ASSERT_EQ(x.at(2),3);
        -: 1554:        }
        -: 1555:
        -: 1556:        // reference and const_reference
        -: 1557:
        -: 1558:        TYPED_TEST(Deque_Fixture, const_deque_at_op_test_1) {
        -: 1559:            typedef typename TestFixture::deque_type deque_type;
        -: 1560:
        -: 1561:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1562:            const deque_type y = x;
        -: 1563:            ASSERT_EQ(y.at(0),1);
        -: 1564:        }
        -: 1565:
        -: 1566:        TYPED_TEST(Deque_Fixture, const_deque_at_op_test_2) {
        -: 1567:            typedef typename TestFixture::deque_type deque_type;
        -: 1568:
        -: 1569:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1570:            const deque_type y = x;
        -: 1571:            ASSERT_EQ(y.at(1),2);
        -: 1572:        }
        -: 1573:
        -: 1574:        TYPED_TEST(Deque_Fixture, const_deque_at_op_test_3) {
        -: 1575:            typedef typename TestFixture::deque_type deque_type;
        -: 1576:
        -: 1577:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1578:            const deque_type y = x;
        -: 1579:            ASSERT_EQ(y.at(2),3);
        -: 1580:        }
        -: 1581:
        -: 1582:        // ----
        -: 1583:        // back
        -: 1584:        // ----
        -: 1585:
        -: 1586:        TYPED_TEST(Deque_Fixture, deque_back_test_1) {
        -: 1587:            typedef typename TestFixture::deque_type deque_type;
        -: 1588:
        -: 1589:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1590:            deque_type y(x); 
        -: 1591:            ASSERT_EQ(x.back(),4);
        -: 1592:        }
        -: 1593:
        -: 1594:        TYPED_TEST(Deque_Fixture, deque_back_test_2) {
        -: 1595:            typedef typename TestFixture::deque_type deque_type;
        -: 1596:
        -: 1597:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1598:            ASSERT_EQ(x.back(),0);
        -: 1599:        }
        -: 1600:
        -: 1601:        TYPED_TEST(Deque_Fixture, deque_back_test_3) {
        -: 1602:            typedef typename TestFixture::deque_type deque_type;
        -: 1603:
        -: 1604:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1605:            ASSERT_EQ(x.back(),3);
        -: 1606:        }
        -: 1607:
        -: 1608:        // reference and const_reference
        -: 1609:
        -: 1610:        TYPED_TEST(Deque_Fixture, const_deque_back_test_1) {
        -: 1611:            typedef typename TestFixture::deque_type deque_type;
        -: 1612:
        -: 1613:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1614:            const deque_type y = x;
        -: 1615:            ASSERT_EQ(y.back(),4);
        -: 1616:        }
        -: 1617:
        -: 1618:        TYPED_TEST(Deque_Fixture, const_deque_back_test_2) {
        -: 1619:            typedef typename TestFixture::deque_type deque_type;
        -: 1620:
        -: 1621:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1622:            const deque_type y = x;
        -: 1623:            ASSERT_EQ(y.back(),0);
        -: 1624:        }
        -: 1625:
        -: 1626:        TYPED_TEST(Deque_Fixture, const_deque_back_test_3) {
        -: 1627:            typedef typename TestFixture::deque_type deque_type;
        -: 1628:
        -: 1629:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1630:            const deque_type y = x;
        -: 1631:            ASSERT_EQ(y.back(),3);
        -: 1632:        }
        -: 1633:*/
