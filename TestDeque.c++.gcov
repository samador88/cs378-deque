        -:    0:Source:TestDeque.c++
        -:    0:Graph:TestDeque.gcno
        -:    0:Data:TestDeque.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// --------------------------------
        -:    2:// projects/c++/deque/TestDeque.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// --------------------------------
        -:    6:
        -:    7:// http://www.cplusplus.com/reference/deque/deque/
        -:    8:
        -:    9:// --------
        -:   10:// includes
        -:   11:// --------
        -:   12:
        -:   13:#include <deque>     // deque
        -:   14:#include <stdexcept> // invalid_argument, out_of_range
        -:   15:
        -:   16:#include "gtest/gtest.h"
        -:   17:
        -:   18:#include "Deque.h"
        -:   19:
        -:   20:// -----
        -:   21:// Using
        -:   22:// -----
        -:   23:
        -:   24:using namespace std;
        -:   25:
        -:   26:using testing::Test;
        -:   27:using testing::Types;
        -:   28:
        -:   29:// -----
        -:   30:// Types
        -:   31:// -----
        -:   32:
        -:   33:template <typename T>
function _ZN13Deque_FixtureISt5dequeIiSaIiEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN13Deque_FixtureISt5dequeIiSaIiEEED2Ev called 45 returned 100% blocks executed 75%
function _ZN13Deque_FixtureISt5dequeIiSaIiEEEC2Ev called 45 returned 100% blocks executed 100%
function _ZN13Deque_FixtureI8my_dequeIiSaIiEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN13Deque_FixtureI8my_dequeIiSaIiEEED2Ev called 45 returned 100% blocks executed 75%
function _ZN13Deque_FixtureI8my_dequeIiSaIiEEEC2Ev called 45 returned 100% blocks executed 100%
      180:   34:struct Deque_Fixture : Test {
call    0 never executed
call    1 never executed
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
call   13 returned 100%
        -:   35:    typedef T                               deque_type;
        -:   36:    typedef typename deque_type::value_type value_type;};
        -:   37:
        -:   38:typedef Types<
        -:   39:               deque<int>,
        -:   40:            my_deque<int>>
        -:   41:        deque_types;
        -:   42:
        -:   43:TYPED_TEST_CASE(Deque_Fixture, deque_types);
        -:   44:
        -:   45:// -----
        -:   46:// Tests
        -:   47:// -----
        -:   48:
function _ZN25Deque_Fixture_test_1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 38%
function _ZN25Deque_Fixture_test_1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 39%
function _ZN25Deque_Fixture_test_1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN25Deque_Fixture_test_1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN25Deque_Fixture_test_1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN25Deque_Fixture_test_1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN25Deque_Fixture_test_1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN25Deque_Fixture_test_1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:   49:TYPED_TEST(Deque_Fixture, test_1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:   50:    typedef typename TestFixture::deque_type deque_type;
        -:   51:
        2:   52:    const deque_type x;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
        2:   53:    ASSERT_TRUE(x.empty());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 returned 100%
branch 31 taken 100% (fallthrough)
branch 32 taken 0% (throw)
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 0% (fallthrough)
branch 38 taken 100%
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
call   46 never executed
branch 47 never executed
branch 48 never executed
call   49 never executed
branch 50 never executed
branch 51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 returned 100%
branch 56 taken 100%
branch 57 taken 0%
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
        2:   54:    ASSERT_EQ(x.size(),0);}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 returned 100%
branch 22 taken 100%
branch 23 taken 0%
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 returned 100%
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 0% (fallthrough)
branch 37 taken 100%
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
call   51 never executed
call   52 returned 100%
branch 53 taken 100%
branch 54 taken 0%
call   55 returned 100%
branch 56 taken 100%
branch 57 taken 0%
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
        -:   55:
        -:   56:        // -----------
        -:   57:        // operator ==
        -:   58:        // -----------
        -:   59:
function _ZN27Deque_Fixture_equalop1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN27Deque_Fixture_equalop1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN27Deque_Fixture_equalop1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:   60:        TYPED_TEST(Deque_Fixture, equalop1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:   61:            typedef typename TestFixture::deque_type deque_type;
        -:   62:
        2:   63:            deque_type x(1); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:   64:            x[1];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:   65:            deque_type y(1); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:   66:            y[1];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:   67:
        4:   68:            ASSERT_TRUE(x == y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:   69:        }
        -:   70:
function _ZN27Deque_Fixture_equalop2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 58%
function _ZN27Deque_Fixture_equalop2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 56%
function _ZN27Deque_Fixture_equalop2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:   71:        TYPED_TEST(Deque_Fixture, equalop2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:   72:            typedef typename TestFixture::deque_type deque_type;
        -:   73:
        2:   74:            deque_type x(4); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:   75:            x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   76:            x[1] = 4; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   77:            x[2] = 3; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   78:            x[3] = 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:   79:            deque_type y(10); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:   80:            y[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   81:            y[1] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   82:            y[2] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   83:            y[3] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   84:            y[4] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   85:            y[5] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   86:            y[6] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   87:            y[7] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   88:            y[8] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   89:            y[9] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:   90:            ASSERT_FALSE(x == y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:   91:        }
        -:   92:
function _ZN27Deque_Fixture_equalop3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN27Deque_Fixture_equalop3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN27Deque_Fixture_equalop3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN27Deque_Fixture_equalop3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN27Deque_Fixture_equalop3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:   93:        TYPED_TEST(Deque_Fixture, equalop3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:   94:            typedef typename TestFixture::deque_type deque_type;
        -:   95:
        2:   96:            deque_type x;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
        4:   97:            deque_type y(3); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:   98:            y[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:   99:            y[1] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  100:            y[2] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  101:            ASSERT_FALSE(x == y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
        -:  102:        }
        -:  103:       
        -:  104:
        -:  105:		// ----------
        -:  106:        // operator <
        -:  107:        // ----------
        -:  108:
        -:  109:       
function _ZN30Deque_Fixture_lessthanop1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 46%
function _ZN30Deque_Fixture_lessthanop1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 45%
function _ZN30Deque_Fixture_lessthanop1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  110:        TYPED_TEST(Deque_Fixture, lessthanop1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  111:            typedef typename TestFixture::deque_type deque_type;
        -:  112:
        2:  113:            deque_type x(4); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  114:            x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  115:            x[1] = 4; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  116:            x[2] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  117:            x[3] = 4;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  118:            deque_type y(4); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  119:            y[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  120:            y[1] = 4; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  121:            y[2] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  122:            y[3] = 4;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  123:
        2:  124:            ASSERT_FALSE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
        4:  125:            ASSERT_TRUE(x == y);}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  126:
function _ZN30Deque_Fixture_lessthanop2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 52%
function _ZN30Deque_Fixture_lessthanop2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN30Deque_Fixture_lessthanop2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  127:        TYPED_TEST(Deque_Fixture, lessthanop2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  128:            typedef typename TestFixture::deque_type deque_type;
        -:  129:
        2:  130:            deque_type x(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  131:            x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  132:            x[1] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  133:            x[2] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  134:            deque_type y(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  135:            y[0] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  136:            y[1] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  137:            y[2] = 6;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  138:
        4:  139:            ASSERT_TRUE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  140:        }
        -:  141:
function _ZN30Deque_Fixture_lessthanop3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN30Deque_Fixture_lessthanop3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_lessthanop3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  142:        TYPED_TEST(Deque_Fixture, lessthanop3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  143:            typedef typename TestFixture::deque_type deque_type;
        -:  144:
        2:  145:            deque_type x(1); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  146:            x[0] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  147:            deque_type y(3); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  148:            y[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  149:            y[1] = 4; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  150:            y[2] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  151:            ASSERT_TRUE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  152:        }
        -:  153:
        -:  154:
function _ZN30Deque_Fixture_lessthanop4_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN30Deque_Fixture_lessthanop4_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_lessthanop4_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop4_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop4_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop4_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop4_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop4_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  155:        TYPED_TEST(Deque_Fixture, lessthanop4) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  156:            typedef typename TestFixture::deque_type deque_type;
        -:  157:
        2:  158:            deque_type x(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:  159:            x[0] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  160:            x[2] = 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  161:            x[3] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  162:            deque_type y;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
        4:  163:            ASSERT_FALSE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  164:        }
        -:  165:
function _ZN30Deque_Fixture_lessthanop5_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_lessthanop5_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN30Deque_Fixture_lessthanop5_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop5_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop5_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop5_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_lessthanop5_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_lessthanop5_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  166:        TYPED_TEST(Deque_Fixture, lessthanop5) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  167:            typedef typename TestFixture::deque_type deque_type;
        -:  168:
        2:  169:            deque_type x(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        4:  170:            deque_type y(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  171:            x[0] = 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  172:            y[0] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  173:            ASSERT_FALSE(x < y);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 returned 100%
branch 26 taken 100%
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100%
branch 30 taken 0%
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  174:        }
        -:  175:		// --------
        -:  176:        // iterator
        -:  177:        // --------
        -:  178:
        -:  179:                // -----------
        -:  180:                // operator ==
        -:  181:                // -----------
        -:  182:
        -:  183:               //NEED TO CHANGE THESE
function _ZN30Deque_Fixture_iter_equal1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 52%
function _ZN30Deque_Fixture_iter_equal1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN30Deque_Fixture_iter_equal1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_equal1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_equal1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  184:               TYPED_TEST(Deque_Fixture, iter_equal1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  185:                    typedef typename TestFixture::deque_type deque_type;
        -:  186:
        2:  187:                    deque_type x(10);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  188:                    x[0] = 3; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  189:                    x[1] = 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  190:                    deque_type y(10); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  191:                    y[0] = 3; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  192:                    y[1] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  193:
        2:  194:                    typename deque_type::iterator x_b = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  195:                    typename deque_type::iterator y_b = y.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  196:
        4:  197:                    ASSERT_FALSE(x_b == y_b);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  198:                }
        -:  199:
function _ZN30Deque_Fixture_iter_equal2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 52%
function _ZN30Deque_Fixture_iter_equal2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN30Deque_Fixture_iter_equal2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_equal2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_equal2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  200:                TYPED_TEST(Deque_Fixture, iter_equal2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  201:                    typedef typename TestFixture::deque_type deque_type;
        -:  202:
        2:  203:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  204:                    x[0] = 0; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  205:                    x[1] = 0;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  206:                    deque_type y(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  207:                    y[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  208:                    y[1] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  209:
        2:  210:                    typename deque_type::iterator x_b = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  211:                    typename deque_type::iterator y_b = y.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  212:
        4:  213:                    ASSERT_FALSE(x_b == y_b);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  214:                }
        -:  215:
function _ZN30Deque_Fixture_iter_equal3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN30Deque_Fixture_iter_equal3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN30Deque_Fixture_iter_equal3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_equal3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_equal3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_equal3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  216:                TYPED_TEST(Deque_Fixture, iter_equal3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  217:                    typedef typename TestFixture::deque_type deque_type;
        -:  218:
        2:  219:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  220:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  221:                    x[1] = 4;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  222:
        2:  223:                    typename deque_type::iterator x_b = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  224:                    typename deque_type::iterator x_e = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  225:
        2:  226:                    ++x_b;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  227:                    --x_e;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  228:
        2:  229:                    ASSERT_TRUE(x_b == x_e);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  230:                }
        -:  231:				
        -:  232:				// -----------
        -:  233:                // operator !=
        -:  234:                // -----------
        -:  235:
function _ZN33Deque_Fixture_iter_notequal1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 52%
function _ZN33Deque_Fixture_iter_notequal1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN33Deque_Fixture_iter_notequal1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_notequal1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_notequal1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  236:                TYPED_TEST(Deque_Fixture, iter_notequal1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  237:                    typedef typename TestFixture::deque_type deque_type;
        -:  238:
        2:  239:                    deque_type x(10); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  240:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  241:                    x[1] = 0;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  242:                    deque_type y(10); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  243:                    y[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  244:                    y[1] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  245:
        2:  246:                    typename deque_type::iterator x_b = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  247:                    typename deque_type::iterator y_b = y.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  248:
        4:  249:                    ASSERT_TRUE(x_b != y_b);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  250:                }
        -:  251:
function _ZN33Deque_Fixture_iter_notequal2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 54%
function _ZN33Deque_Fixture_iter_notequal2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 52%
function _ZN33Deque_Fixture_iter_notequal2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_notequal2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_notequal2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  252:                TYPED_TEST(Deque_Fixture, iter_notequal2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  253:                    typedef typename TestFixture::deque_type deque_type;
        -:  254:
        2:  255:                    deque_type x(10); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  256:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  257:                    x[1] = 0;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        4:  258:                    deque_type y(10); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100%
branch 14 taken 0%
call   15 never executed
call   16 never executed
        2:  259:                    y[0] = 0; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  260:                    y[1] = 10;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  261:
        2:  262:                    typename deque_type::iterator x_b = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  263:                    typename deque_type::iterator y_b = y.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  264:
        2:  265:                    ++x_b;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  266:                    ++y_b;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  267:
        4:  268:                    ASSERT_TRUE(x_b != y_b);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  269:                }
        -:  270:
function _ZN33Deque_Fixture_iter_notequal3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN33Deque_Fixture_iter_notequal3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN33Deque_Fixture_iter_notequal3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_notequal3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_notequal3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_notequal3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  271:                TYPED_TEST(Deque_Fixture, iter_notequal3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  272:                    typedef typename TestFixture::deque_type deque_type;
        -:  273:
        2:  274:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  275:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  276:                    x[1] = 0;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  277:
        2:  278:                    typename deque_type::iterator x_b = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  279:                    typename deque_type::iterator x_e = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  280:
        2:  281:                    ++x_b;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  282:                    ++x_b;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  283:
        2:  284:                    ASSERT_FALSE(x_b != x_e);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  285:                }
        -:  286: 				// ----------
        -:  287:                // operator +
        -:  288:                // ----------
        -:  289:
        -:  290:
function _ZN29Deque_Fixture_iter_plus1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN29Deque_Fixture_iter_plus1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN29Deque_Fixture_iter_plus1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_plus1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_plus1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  291:                TYPED_TEST(Deque_Fixture, iter_plus1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  292:                    typedef typename TestFixture::deque_type deque_type;
        -:  293:
        2:  294:                    deque_type x(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  295:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  296:                    x[1] = 4;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  297:
        2:  298:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  299:                    typename deque_type::iterator xbeg2 = xbeg;
call    0 returned 100%
        -:  300:
        2:  301:                    xbeg = xbeg + 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  302:
        2:  303:                    ASSERT_TRUE(xbeg == xbeg2 + 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 returned 100%
branch 30 taken 100%
branch 31 taken 0%
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 returned 100%
branch 64 taken 100%
branch 65 taken 0%
call   66 returned 100%
branch 67 taken 100%
branch 68 taken 0%
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
        -:  304:                }
        -:  305:
function _ZN29Deque_Fixture_iter_plus2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN29Deque_Fixture_iter_plus2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 46%
function _ZN29Deque_Fixture_iter_plus2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_plus2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_plus2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  306:                TYPED_TEST(Deque_Fixture, iter_plus2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  307:                    typedef typename TestFixture::deque_type deque_type;
        -:  308:
        2:  309:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  310:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  311:                    x[1] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  312:
        2:  313:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  314:
        2:  315:                    ASSERT_TRUE(xbeg + 2 == x.end());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 returned 100%
branch 28 taken 100%
branch 29 taken 0%
call   30 returned 100%
branch 31 taken 100%
branch 32 taken 0%
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 returned 100%
branch 39 taken 100% (fallthrough)
branch 40 taken 0% (throw)
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 0% (fallthrough)
branch 50 taken 100%
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
call   58 never executed
branch 59 never executed
branch 60 never executed
call   61 never executed
branch 62 never executed
branch 63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 returned 100%
branch 68 taken 100%
branch 69 taken 0%
call   70 returned 100%
branch 71 taken 100%
branch 72 taken 0%
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
        -:  316:                }
        -:  317:
function _ZN29Deque_Fixture_iter_plus3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN29Deque_Fixture_iter_plus3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 46%
function _ZN29Deque_Fixture_iter_plus3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_plus3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_plus3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_plus3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  318:                TYPED_TEST(Deque_Fixture, iter_plus3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  319:                    typedef typename TestFixture::deque_type deque_type;
        -:  320:
        2:  321:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  322:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  323:                    x[1] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  324:
        2:  325:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  326:
        2:  327:                    ASSERT_FALSE(xbeg + 1 == x.begin());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 returned 100%
branch 28 taken 100%
branch 29 taken 0%
call   30 returned 100%
branch 31 taken 100%
branch 32 taken 0%
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 returned 100%
branch 39 taken 100% (fallthrough)
branch 40 taken 0% (throw)
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 0% (fallthrough)
branch 50 taken 100%
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
call   58 never executed
branch 59 never executed
branch 60 never executed
call   61 never executed
branch 62 never executed
branch 63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 returned 100%
branch 68 taken 100%
branch 69 taken 0%
call   70 returned 100%
branch 71 taken 100%
branch 72 taken 0%
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
        -:  328:                }
        -:  329:
        -:  330:                /*TYPED_TEST(Deque_Fixture, iter_plus_op_test_4) {
        -:  331:                    typedef typename TestFixture::deque_type deque_type;
        -:  332:
        -:  333:                    deque_type _x(100, 10); _x[24] = 1;
        -:  334:
        -:  335:                    const deque_type x = _x;
        -:  336:
        -:  337:                    typename deque_type::const_iterator xbeg = x.begin() + 24;
        -:  338:
        -:  339:                    ASSERT_EQ(*xbeg, 1);
        -:  340:                }
        -:  341:*/
        -:  342:
        -:  343:                // ----------
        -:  344:                // operator -
        -:  345:                // ----------
        -:  346:
function _ZN30Deque_Fixture_iter_minus1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 51%
function _ZN30Deque_Fixture_iter_minus1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 51%
function _ZN30Deque_Fixture_iter_minus1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_minus1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_minus1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  347:                TYPED_TEST(Deque_Fixture, iter_minus1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  348:                    typedef typename TestFixture::deque_type deque_type;
        -:  349:
        2:  350:                    deque_type x(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  351:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  352:                    x[1] = 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  353:                    x[2] = 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  354:                    x[3] = 4;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  355:                    x[5] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  356:
        2:  357:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  358:                    typename deque_type::iterator xbeg2 = x.begin() + 1;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
        -:  359:
        2:  360:                    ASSERT_TRUE(xbeg - 4 == xbeg2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 returned 100%
branch 30 taken 100%
branch 31 taken 0%
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 returned 100%
branch 64 taken 100%
branch 65 taken 0%
call   66 returned 100%
branch 67 taken 100%
branch 68 taken 0%
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
        -:  361:                }
        -:  362:
function _ZN30Deque_Fixture_iter_minus2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_iter_minus2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN30Deque_Fixture_iter_minus2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_minus2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_minus2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  363:                TYPED_TEST(Deque_Fixture, iter_minus2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  364:                    typedef typename TestFixture::deque_type deque_type;
        -:  365:
        2:  366:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  367:                    x[0] = 0; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  368:                    x[1] = 0;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  369:
        2:  370:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  371:                    typename deque_type::iterator xbeg2 = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  372:
        2:  373:                    ASSERT_TRUE(xbeg - 1 == xbeg2+1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 returned 100%
branch 30 taken 100%
branch 31 taken 0%
call   32 returned 100%
branch 33 taken 100%
branch 34 taken 0%
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 returned 100%
branch 41 taken 100% (fallthrough)
branch 42 taken 0% (throw)
call   43 returned 100%
branch 44 taken 100% (fallthrough)
branch 45 taken 0% (throw)
call   46 returned 100%
call   47 returned 100%
branch 48 taken 100% (fallthrough)
branch 49 taken 0% (throw)
call   50 returned 100%
branch 51 taken 0% (fallthrough)
branch 52 taken 100%
call   53 never executed
branch 54 never executed
branch 55 never executed
call   56 never executed
branch 57 never executed
branch 58 never executed
call   59 never executed
call   60 never executed
branch 61 never executed
branch 62 never executed
call   63 never executed
branch 64 never executed
branch 65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 returned 100%
branch 70 taken 100%
branch 71 taken 0%
call   72 returned 100%
branch 73 taken 100%
branch 74 taken 0%
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
        -:  374:                }
        -:  375:
function _ZN30Deque_Fixture_iter_minus3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_iter_minus3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN30Deque_Fixture_iter_minus3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_minus3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_minus3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  376:                TYPED_TEST(Deque_Fixture, iter_minus3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  377:                    typedef typename TestFixture::deque_type deque_type;
        -:  378:
        2:  379:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  380:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  381:                    x[1] = 20;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  382:
        2:  383:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  384:                    typename deque_type::iterator xbeg2 = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  385:
        2:  386:                    ASSERT_FALSE(xbeg - 1 == xbeg2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 returned 100%
branch 30 taken 100%
branch 31 taken 0%
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 returned 100%
branch 64 taken 100%
branch 65 taken 0%
call   66 returned 100%
branch 67 taken 100%
branch 68 taken 0%
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
        -:  387:                }
        -:  388:
function _ZN30Deque_Fixture_iter_minus4_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_iter_minus4_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN30Deque_Fixture_iter_minus4_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus4_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_minus4_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus4_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN30Deque_Fixture_iter_minus4_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN30Deque_Fixture_iter_minus4_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  389:                TYPED_TEST(Deque_Fixture, iter_minus4) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  390:                    typedef typename TestFixture::deque_type deque_type;
        -:  391:
        2:  392:                    deque_type x(100, 1); 
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        2:  393:                    x[10] = 4;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  394:
        2:  395:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  396:
        2:  397:                    ASSERT_EQ(*(xbeg - 90), 4);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 returned 100%
branch 28 taken 100%
branch 29 taken 0%
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
branch 35 taken 100% (fallthrough)
branch 36 taken 0% (throw)
call   37 returned 100%
call   38 returned 100%
branch 39 taken 100% (fallthrough)
branch 40 taken 0% (throw)
call   41 returned 100%
branch 42 taken 0% (fallthrough)
branch 43 taken 100%
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
branch 54 never executed
branch 55 never executed
call   56 never executed
call   57 never executed
call   58 returned 100%
branch 59 taken 100%
branch 60 taken 0%
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  398:                }
        -:  399:
        -:  400:
        -:  401:				// ----------
        -:  402:                // operator *
        -:  403:                // ----------
        -:  404:
function _ZN29Deque_Fixture_iter_star1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN29Deque_Fixture_iter_star1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN29Deque_Fixture_iter_star1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_star1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_star1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  405:                TYPED_TEST(Deque_Fixture, iter_star1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  406:                    typedef typename TestFixture::deque_type deque_type;
        -:  407:
        2:  408:                    deque_type x(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  409:                    x[0] = 9; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  410:                    x[1] = 15;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  411:
        2:  412:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  413:
        2:  414:                    ASSERT_EQ(*xbeg, 9);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 returned 100%
branch 22 taken 100%
branch 23 taken 0%
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 returned 100%
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 0% (fallthrough)
branch 37 taken 100%
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
call   51 never executed
call   52 returned 100%
branch 53 taken 100%
branch 54 taken 0%
call   55 returned 100%
branch 56 taken 100%
branch 57 taken 0%
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
        -:  415:                }
        -:  416:
function _ZN29Deque_Fixture_iter_star2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 51%
function _ZN29Deque_Fixture_iter_star2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN29Deque_Fixture_iter_star2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_star2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_star2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  417:                TYPED_TEST(Deque_Fixture, iter_star2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  418:                    typedef typename TestFixture::deque_type deque_type;
        -:  419:
        2:  420:                    deque_type x(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  421:                    x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  422:                    x[1] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  423:
        2:  424:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  425:
        2:  426:                    ++xbeg;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  427:
        2:  428:                    ASSERT_EQ(*xbeg, 5);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 returned 100%
branch 22 taken 100%
branch 23 taken 0%
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 returned 100%
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 0% (fallthrough)
branch 37 taken 100%
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
call   51 never executed
call   52 returned 100%
branch 53 taken 100%
branch 54 taken 0%
call   55 returned 100%
branch 56 taken 100%
branch 57 taken 0%
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
        -:  429:                }
        -:  430:
function _ZN29Deque_Fixture_iter_star3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 51%
function _ZN29Deque_Fixture_iter_star3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN29Deque_Fixture_iter_star3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_star3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_star3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_star3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  431:                TYPED_TEST(Deque_Fixture, iter_star3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  432:                    typedef typename TestFixture::deque_type deque_type;
        -:  433:
        2:  434:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  435:                    x[0] = 100000; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  436:                    x[1] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  437:
        2:  438:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  439:
        2:  440:                    --xbeg;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  441:
        2:  442:                    ASSERT_EQ(*xbeg, 1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 returned 100%
branch 22 taken 100%
branch 23 taken 0%
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 returned 100%
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 0% (fallthrough)
branch 37 taken 100%
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
call   51 never executed
call   52 returned 100%
branch 53 taken 100%
branch 54 taken 0%
call   55 returned 100%
branch 56 taken 100%
branch 57 taken 0%
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
        -:  443:                }
        -:  444:
        -:  445:
        -:  446:				// -----------
        -:  447:                // operator ->
        -:  448:                // -----------
        -:  449:
function _ZN29Deque_Fixture_iter_arrow_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN29Deque_Fixture_iter_arrow_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN29Deque_Fixture_iter_arrow_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_arrow_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_arrow_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_arrow_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN29Deque_Fixture_iter_arrow_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN29Deque_Fixture_iter_arrow_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  450:                TYPED_TEST(Deque_Fixture, iter_arrow) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  451:                    struct S {
        -:  452:                        int a;
        -:  453:                        int b;
        -:  454:                    };
        -:  455:
        2:  456:                    struct S s_a; s_a.a = 9; s_a.b = 8;
        2:  457:                    struct S s_b; s_b.a = 6; s_b.b = 7;
        -:  458:
        2:  459:                    my_deque<S> x(3); 
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        2:  460:                    x[0] = s_a;
call    0 returned 100%
call    1 returned 100%
        2:  461:                    x[1] = s_b;
call    0 returned 100%
call    1 returned 100%
        -:  462:
        2:  463:                    auto xbeg = x.begin();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  464:
        2:  465:                    ASSERT_EQ(xbeg->a, 9);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 0% (fallthrough)
branch 41 taken 100%
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 returned 100%
branch 57 taken 100%
branch 58 taken 0%
call   59 returned 100%
branch 60 taken 100%
branch 61 taken 0%
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
        -:  466:                }
        -:  467:
        -:  468:                
        -:  469:
        -:  470:                // -----------
        -:  471:                // operator ++
        -:  472:                // -----------
        -:  473:                
function _ZN33Deque_Fixture_iter_plusplus1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN33Deque_Fixture_iter_plusplus1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN33Deque_Fixture_iter_plusplus1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_plusplus1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_plusplus1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  474:                TYPED_TEST(Deque_Fixture, iter_plusplus1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  475:                    typedef typename TestFixture::deque_type deque_type;
        -:  476:
        2:  477:                    deque_type x(10); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  478:                    x[0] = 100000; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  479:                    x[1] = 10;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  480:
        2:  481:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  482:                    typename deque_type::iterator xbeg2 = xbeg + 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  483:
        2:  484:                    ++xbeg;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  485:
        2:  486:                    ASSERT_TRUE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  487:                }
        -:  488:
function _ZN33Deque_Fixture_iter_plusplus2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN33Deque_Fixture_iter_plusplus2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN33Deque_Fixture_iter_plusplus2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_plusplus2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_plusplus2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  489:                TYPED_TEST(Deque_Fixture, iter_plusplus2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  490:                    typedef typename TestFixture::deque_type deque_type;
        -:  491:
        2:  492:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  493:                    x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  494:                    x[1] = 0;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  495:
        2:  496:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  497:                    typename deque_type::iterator xbeg2 = xbeg;
call    0 returned 100%
        -:  498:
        2:  499:                    ++xbeg;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  500:
        2:  501:                    ASSERT_FALSE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  502:                }
        -:  503:
function _ZN33Deque_Fixture_iter_plusplus3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN33Deque_Fixture_iter_plusplus3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN33Deque_Fixture_iter_plusplus3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_plusplus3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN33Deque_Fixture_iter_plusplus3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN33Deque_Fixture_iter_plusplus3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  504:                TYPED_TEST(Deque_Fixture, iter_plusplus3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  505:                    typedef typename TestFixture::deque_type deque_type;
        -:  506:
        2:  507:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  508:                    x[0] = 0; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  509:                    x[1] = 0;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  510:
        2:  511:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  512:
        2:  513:                    ++xbeg;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  514:                    ++xbeg;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  515:
        2:  516:                    ASSERT_TRUE(xbeg == x.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 returned 100%
branch 28 taken 100%
branch 29 taken 0%
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  517:                }
        -:  518:
        -:  519:
function _ZN37Deque_Fixture_iter_postplusplus1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN37Deque_Fixture_iter_postplusplus1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN37Deque_Fixture_iter_postplusplus1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN37Deque_Fixture_iter_postplusplus1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN37Deque_Fixture_iter_postplusplus1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  520:                TYPED_TEST(Deque_Fixture, iter_postplusplus1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  521:                    typedef typename TestFixture::deque_type deque_type;
        -:  522:
        2:  523:                    deque_type x(5); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  524:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  525:                    x[1] = 10;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  526:
        2:  527:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  528:                    typename deque_type::iterator xbeg2 = xbeg + 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  529:
        2:  530:                    xbeg++;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  531:
        2:  532:                    ASSERT_TRUE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  533:                }
        -:  534:
function _ZN37Deque_Fixture_iter_postplusplus2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN37Deque_Fixture_iter_postplusplus2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN37Deque_Fixture_iter_postplusplus2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN37Deque_Fixture_iter_postplusplus2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN37Deque_Fixture_iter_postplusplus2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  535:                TYPED_TEST(Deque_Fixture, iter_postplusplus2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  536:                    typedef typename TestFixture::deque_type deque_type;
        -:  537:
        2:  538:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  539:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  540:                    x[1] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  541:
        2:  542:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  543:                    typename deque_type::iterator xbeg2 = xbeg + 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  544:
        2:  545:                    ASSERT_FALSE(xbeg++ == xbeg2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 returned 100%
branch 30 taken 100%
branch 31 taken 0%
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 returned 100%
branch 64 taken 100%
branch 65 taken 0%
call   66 returned 100%
branch 67 taken 100%
branch 68 taken 0%
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
        -:  546:                }
        -:  547:
function _ZN37Deque_Fixture_iter_postplusplus3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN37Deque_Fixture_iter_postplusplus3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN37Deque_Fixture_iter_postplusplus3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN37Deque_Fixture_iter_postplusplus3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN37Deque_Fixture_iter_postplusplus3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN37Deque_Fixture_iter_postplusplus3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  548:                TYPED_TEST(Deque_Fixture, iter_postplusplus3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  549:                    typedef typename TestFixture::deque_type deque_type;
        -:  550:
        2:  551:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  552:                    x[0] = 1000000000; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  553:                    x[1] = 100000000;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  554:
        2:  555:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  556:
        2:  557:                    xbeg++;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  558:                    xbeg++;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  559:
        2:  560:                    ASSERT_TRUE(xbeg == x.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 returned 100%
branch 28 taken 100%
branch 29 taken 0%
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  561:                }
        -:  562:
        -:  563:                // -----------
        -:  564:                // operator --
        -:  565:                // -----------
        -:  566:
function _ZN35Deque_Fixture_iter_minusminus1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN35Deque_Fixture_iter_minusminus1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN35Deque_Fixture_iter_minusminus1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusminus1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusminus1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  567:                TYPED_TEST(Deque_Fixture, iter_minusminus1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  568:                    typedef typename TestFixture::deque_type deque_type;
        -:  569:
        2:  570:                    deque_type x(3); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  571:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  572:                    x[1] = 15;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  573:                    x[2] = 12;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  574:
        2:  575:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  576:                    typename deque_type::iterator xbeg2 = xbeg - 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  577:
        2:  578:                    --xbeg;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  579:
        2:  580:                    ASSERT_TRUE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  581:                }
        -:  582:
function _ZN35Deque_Fixture_iter_minusminus2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN35Deque_Fixture_iter_minusminus2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN35Deque_Fixture_iter_minusminus2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusminus2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusminus2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  583:                TYPED_TEST(Deque_Fixture, iter_minusminus2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  584:                    typedef typename TestFixture::deque_type deque_type;
        -:  585:
        2:  586:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  587:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  588:                    x[1] = 15;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  589:
        2:  590:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  591:                    typename deque_type::iterator xbeg2 = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  592:
        2:  593:                    --xbeg2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  594:
        2:  595:                    ASSERT_FALSE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  596:                }
        -:  597:
function _ZN35Deque_Fixture_iter_minusminus3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN35Deque_Fixture_iter_minusminus3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN35Deque_Fixture_iter_minusminus3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusminus3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusminus3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusminus3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  598:                TYPED_TEST(Deque_Fixture, iter_minusminus3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  599:                    typedef typename TestFixture::deque_type deque_type;
        -:  600:
        2:  601:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  602:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  603:                    x[1] = 15;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  604:
        2:  605:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  606:                    typename deque_type::iterator xbeg2 = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  607:
        2:  608:                    --xbeg2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  609:
        2:  610:                    ASSERT_TRUE(xbeg == --xbeg2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 returned 100%
branch 30 taken 100%
branch 31 taken 0%
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 returned 100%
branch 64 taken 100%
branch 65 taken 0%
call   66 returned 100%
branch 67 taken 100%
branch 68 taken 0%
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
        -:  611:                }
        -:  612:
        -:  613:
        -:  614:
function _ZN39Deque_Fixture_iter_minusminuspost1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN39Deque_Fixture_iter_minusminuspost1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN39Deque_Fixture_iter_minusminuspost1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN39Deque_Fixture_iter_minusminuspost1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN39Deque_Fixture_iter_minusminuspost1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  615:                TYPED_TEST(Deque_Fixture, iter_minusminuspost1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  616:                    typedef typename TestFixture::deque_type deque_type;
        -:  617:
        2:  618:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  619:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  620:                    x[1] = 145;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  621:
        2:  622:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  623:                    typename deque_type::iterator xbeg2 = xbeg - 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  624:
        2:  625:                    xbeg--;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  626:
        2:  627:                    ASSERT_TRUE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  628:                }
        -:  629:
function _ZN39Deque_Fixture_iter_minusminuspost2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN39Deque_Fixture_iter_minusminuspost2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN39Deque_Fixture_iter_minusminuspost2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN39Deque_Fixture_iter_minusminuspost2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN39Deque_Fixture_iter_minusminuspost2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  630:                TYPED_TEST(Deque_Fixture, iter_minusminuspost2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  631:                    typedef typename TestFixture::deque_type deque_type;
        -:  632:
        2:  633:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  634:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  635:                    x[1] = 153;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  636:
        2:  637:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  638:                    typename deque_type::iterator xbeg2 = xbeg - 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  639:
        2:  640:                    xbeg2--;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  641:
        2:  642:                    ASSERT_FALSE(xbeg2-- == xbeg);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 returned 100%
branch 30 taken 100%
branch 31 taken 0%
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 returned 100%
branch 64 taken 100%
branch 65 taken 0%
call   66 returned 100%
branch 67 taken 100%
branch 68 taken 0%
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
        -:  643:                }
        -:  644:
function _ZN39Deque_Fixture_iter_minusminuspost3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 52%
function _ZN39Deque_Fixture_iter_minusminuspost3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 51%
function _ZN39Deque_Fixture_iter_minusminuspost3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN39Deque_Fixture_iter_minusminuspost3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN39Deque_Fixture_iter_minusminuspost3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN39Deque_Fixture_iter_minusminuspost3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  645:                TYPED_TEST(Deque_Fixture, iter_minusminuspost3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  646:                    typedef typename TestFixture::deque_type deque_type;
        -:  647:
        2:  648:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  649:                    x[0] = 10; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  650:                    x[1] = 1000;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  651:                    x[2] = 10000;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  652:
        2:  653:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  654:                    typename deque_type::iterator xbeg2 = xbeg - 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  655:
        2:  656:                    xbeg--;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  657:                    xbeg--;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  658:                    xbeg--;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  659:
        2:  660:                    ASSERT_TRUE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  661:                }
        -:  662:
        -:  663:                // -----------
        -:  664:                // operator +=
        -:  665:                // -----------
        -:  666:
function _ZN34Deque_Fixture_iter_plusequal1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN34Deque_Fixture_iter_plusequal1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN34Deque_Fixture_iter_plusequal1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN34Deque_Fixture_iter_plusequal1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN34Deque_Fixture_iter_plusequal1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  667:                TYPED_TEST(Deque_Fixture, iter_plusequal1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  668:                    typedef typename TestFixture::deque_type deque_type;
        -:  669:
        2:  670:                    deque_type x(3); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  671:                    x[0] = 1; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  672:                    x[1] = 5000;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  673:                    x[2] = 10000;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  674:
        2:  675:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  676:                    typename deque_type::iterator xbeg2 = xbeg;
call    0 returned 100%
        -:  677:
        2:  678:                    xbeg += 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  679:
        2:  680:                    ASSERT_TRUE(xbeg == xbeg2 + 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 returned 100%
branch 30 taken 100%
branch 31 taken 0%
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 0% (fallthrough)
branch 46 taken 100%
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 returned 100%
branch 64 taken 100%
branch 65 taken 0%
call   66 returned 100%
branch 67 taken 100%
branch 68 taken 0%
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
        -:  681:                }
        -:  682:
function _ZN34Deque_Fixture_iter_plusequal2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN34Deque_Fixture_iter_plusequal2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN34Deque_Fixture_iter_plusequal2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN34Deque_Fixture_iter_plusequal2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN34Deque_Fixture_iter_plusequal2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  683:                TYPED_TEST(Deque_Fixture, iter_plusequal2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  684:                    typedef typename TestFixture::deque_type deque_type;
        -:  685:
        2:  686:                    deque_type x(3); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  687:                    x[0] = 10000; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  688:                    x[1] = 50000;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  689:                    x[2] = 100000;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  690:
        2:  691:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  692:
        2:  693:                    xbeg += 3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  694:
        2:  695:                    ASSERT_TRUE(xbeg == x.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 returned 100%
branch 28 taken 100%
branch 29 taken 0%
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  696:                }
        -:  697:
function _ZN34Deque_Fixture_iter_plusequal3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN34Deque_Fixture_iter_plusequal3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 47%
function _ZN34Deque_Fixture_iter_plusequal3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN34Deque_Fixture_iter_plusequal3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN34Deque_Fixture_iter_plusequal3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN34Deque_Fixture_iter_plusequal3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  698:                TYPED_TEST(Deque_Fixture, iter_plusequal3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  699:                    typedef typename TestFixture::deque_type deque_type;
        -:  700:
        2:  701:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  702:                    x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  703:                    x[1] = 5;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  704:
        2:  705:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  706:
        2:  707:                    xbeg += 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  708:
        2:  709:                    ASSERT_FALSE(xbeg == x.begin());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 returned 100%
branch 28 taken 100%
branch 29 taken 0%
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 0% (fallthrough)
branch 44 taken 100%
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
branch 56 never executed
branch 57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 100%
branch 62 taken 100%
branch 63 taken 0%
call   64 returned 100%
branch 65 taken 100%
branch 66 taken 0%
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
        -:  710:                }
        -:  711:
function _ZN44Deque_Fixture_iter_plus_op_equal_test_4_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 50%
function _ZN44Deque_Fixture_iter_plus_op_equal_test_4_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN44Deque_Fixture_iter_plus_op_equal_test_4_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN44Deque_Fixture_iter_plus_op_equal_test_4_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN44Deque_Fixture_iter_plus_op_equal_test_4_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN44Deque_Fixture_iter_plus_op_equal_test_4_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN44Deque_Fixture_iter_plus_op_equal_test_4_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN44Deque_Fixture_iter_plus_op_equal_test_4_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  712:                TYPED_TEST(Deque_Fixture, iter_plus_op_equal_test_4) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  713:                    typedef typename TestFixture::deque_type deque_type;
        -:  714:
        2:  715:                    deque_type x(100); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  716:                    x[10] = 233;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  717:
        2:  718:                    typename deque_type::iterator xbeg = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  719:
        2:  720:                    xbeg += 10;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  721:
        2:  722:                    ASSERT_EQ(*xbeg, 233);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 returned 100%
branch 22 taken 100%
branch 23 taken 0%
call   24 returned 100%
branch 25 taken 100%
branch 26 taken 0%
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 returned 100%
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 0% (fallthrough)
branch 37 taken 100%
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
call   51 never executed
call   52 returned 100%
branch 53 taken 100%
branch 54 taken 0%
call   55 returned 100%
branch 56 taken 100%
branch 57 taken 0%
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
        -:  723:                }
        -:  724:
        -:  725:
        -:  726:                // -----------
        -:  727:                // operator -=
        -:  728:                // -----------
        -:  729:
function _ZN35Deque_Fixture_iter_minusequal1_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN35Deque_Fixture_iter_minusequal1_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN35Deque_Fixture_iter_minusequal1_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal1_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusequal1_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal1_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusequal1_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal1_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  730:                TYPED_TEST(Deque_Fixture, iter_minusequal1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  731:                    typedef typename TestFixture::deque_type deque_type;
        -:  732:
        2:  733:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  734:                    x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  735:                    x[1] = 10;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  736:
        2:  737:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  738:                    typename deque_type::iterator xbeg2 = x.begin() + 1;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
        -:  739:
        2:  740:                    xbeg -= 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  741:
        2:  742:                    ASSERT_TRUE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  743:                }
        -:  744:
function _ZN35Deque_Fixture_iter_minusequal2_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN35Deque_Fixture_iter_minusequal2_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN35Deque_Fixture_iter_minusequal2_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal2_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusequal2_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal2_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusequal2_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal2_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  745:                TYPED_TEST(Deque_Fixture, iter_minusequal2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  746:                    typedef typename TestFixture::deque_type deque_type;
        -:  747:
        2:  748:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  749:                    x[0] = 5; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  750:                    x[1] = 100000;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  751:
        2:  752:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  753:                    typename deque_type::iterator xbeg2 = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  754:
        2:  755:                    xbeg -= 2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  756:
        2:  757:                    ASSERT_TRUE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  758:                }
        -:  759:
function _ZN35Deque_Fixture_iter_minusequal3_TestISt5dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 49%
function _ZN35Deque_Fixture_iter_minusequal3_TestI8my_dequeIiSaIiEEE8TestBodyEv called 1 returned 100% blocks executed 48%
function _ZN35Deque_Fixture_iter_minusequal3_TestISt5dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal3_TestISt5dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusequal3_TestI8my_dequeIiSaIiEEED0Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal3_TestI8my_dequeIiSaIiEEED2Ev called 1 returned 100% blocks executed 75%
function _ZN35Deque_Fixture_iter_minusequal3_TestISt5dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
function _ZN35Deque_Fixture_iter_minusequal3_TestI8my_dequeIiSaIiEEEC2Ev called 1 returned 100% blocks executed 100%
        9:  760:                TYPED_TEST(Deque_Fixture, iter_minusequal3) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
        -:  761:                    typedef typename TestFixture::deque_type deque_type;
        -:  762:
        2:  763:                    deque_type x(2); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  764:                    x[0] = 1000000; 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2:  765:                    x[1] = 0;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -:  766:
        2:  767:                    typename deque_type::iterator xbeg = x.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  768:                    typename deque_type::iterator xbeg2 = x.begin();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  769:
        2:  770:                    xbeg -= 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  771:
        2:  772:                    ASSERT_FALSE(xbeg == xbeg2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 returned 100%
branch 24 taken 100%
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100%
branch 28 taken 0%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 returned 100%
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 0% (fallthrough)
branch 40 taken 100%
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 returned 100%
branch 58 taken 100%
branch 59 taken 0%
call   60 returned 100%
branch 61 taken 100%
branch 62 taken 0%
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
function _GLOBAL__sub_I_gtest_Deque_Fixture_test_1_registered_ called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  773:                }
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  774:
        -:  775:
        -:  776:        // --------------
        -:  777:        // const_iterator
        -:  778:        // --------------
        -:  779:
        -:  780:          /*      // -----------
        -:  781:                // operator ==
        -:  782:                // -----------
        -:  783:
        -:  784:                TYPED_TEST(Deque_Fixture, const_iter_equality_op_test_1) {
        -:  785:                    typedef typename TestFixture::deque_type deque_type;
        -:  786:
        -:  787:                    deque_type _x(5); _x[0] = 1; _x[1] = 4;
        -:  788:                    deque_type _y(5); _y[0] = 1; _y[1] = 3;
        -:  789:
        -:  790:                    const deque_type x = _x;
        -:  791:                    const deque_type y = _y;
        -:  792:
        -:  793:                    typename deque_type::const_iterator x_b = x.begin();
        -:  794:                    typename deque_type::const_iterator y_b = y.begin();
        -:  795:
        -:  796:                    ASSERT_FALSE(x_b == y_b);
        -:  797:                }
        -:  798:
        -:  799:                TYPED_TEST(Deque_Fixture, const_iter_equality_op_test_2) {
        -:  800:                    typedef typename TestFixture::deque_type deque_type;
        -:  801:
        -:  802:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  803:                    deque_type _y(2); _y[0] = 1; _y[1] = 3;
        -:  804:
        -:  805:                    const deque_type x = _x;
        -:  806:                    const deque_type y = _y;
        -:  807:
        -:  808:                    typename deque_type::const_iterator x_b = x.begin();
        -:  809:                    typename deque_type::const_iterator y_b = y.begin();
        -:  810:
        -:  811:                    ++x_b;
        -:  812:                    ++y_b;
        -:  813:
        -:  814:                    ASSERT_FALSE(x_b == y_b);
        -:  815:                }
        -:  816:
        -:  817:                TYPED_TEST(Deque_Fixture, const_iter_equality_op_test_3) {
        -:  818:                    typedef typename TestFixture::deque_type deque_type;
        -:  819:
        -:  820:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  821:
        -:  822:                    const deque_type x = _x;
        -:  823:
        -:  824:                    typename deque_type::const_iterator x_b = x.begin();
        -:  825:                    typename deque_type::const_iterator x_e = x.end();
        -:  826:
        -:  827:                    ++x_b;
        -:  828:                    ++x_b;
        -:  829:
        -:  830:                    ASSERT_TRUE(x_b == x_e);
        -:  831:                }
        -:  832:
        -:  833:                // -----------
        -:  834:                // operator !=
        -:  835:                // -----------
        -:  836:
        -:  837:                TYPED_TEST(Deque_Fixture, const_iter_inequality_op_test_1) {
        -:  838:                    typedef typename TestFixture::deque_type deque_type;
        -:  839:
        -:  840:                    deque_type _x(5); _x[0] = 1; _x[1] = 4;
        -:  841:                    deque_type _y(5); _y[0] = 1; _y[1] = 3;
        -:  842:
        -:  843:                    const deque_type x = _x;
        -:  844:                    const deque_type y = _y;
        -:  845:
        -:  846:                    typename deque_type::const_iterator x_b = x.begin();
        -:  847:                    typename deque_type::const_iterator y_b = y.begin();
        -:  848:
        -:  849:                    ASSERT_TRUE(x_b != y_b);
        -:  850:                }
        -:  851:
        -:  852:                TYPED_TEST(Deque_Fixture, const_iter_inequality_op_test_2) {
        -:  853:                    typedef typename TestFixture::deque_type deque_type;
        -:  854:
        -:  855:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  856:                    deque_type _y(2); _y[0] = 1; _y[1] = 3;
        -:  857:
        -:  858:                    const deque_type x = _x;
        -:  859:                    const deque_type y = _y;
        -:  860:
        -:  861:                    typename deque_type::const_iterator x_b = x.begin();
        -:  862:                    typename deque_type::const_iterator y_b = y.begin();
        -:  863:
        -:  864:                    ++x_b;
        -:  865:                    ++y_b;
        -:  866:
        -:  867:                    ASSERT_TRUE(x_b != y_b);
        -:  868:                }
        -:  869:
        -:  870:                TYPED_TEST(Deque_Fixture, const_iter_inequality_op_test_3) {
        -:  871:                    typedef typename TestFixture::deque_type deque_type;
        -:  872:
        -:  873:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  874:
        -:  875:                    const deque_type x = _x;
        -:  876:
        -:  877:                    typename deque_type::const_iterator x_b = x.begin();
        -:  878:                    typename deque_type::const_iterator x_e = x.end();
        -:  879:
        -:  880:                    ++x_b;
        -:  881:                    ++x_b;
        -:  882:
        -:  883:                    ASSERT_FALSE(x_b != x_e);
        -:  884:                }
        -:  885:*/
        -:  886:       /* //      NEED TO CHANGE THESE 
        -:  887:                // ----------
        -:  888:                // operator +
        -:  889:                // ----------
        -:  890:
        -:  891:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_test_1) {
        -:  892:                    typedef typename TestFixture::deque_type deque_type;
        -:  893:
        -:  894:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  895:
        -:  896:                    const deque_type x = _x;
        -:  897:
        -:  898:                    typename deque_type::const_iterator xbeg = x.begin();
        -:  899:                    typename deque_type::const_iterator xbeg2 = xbeg;
        -:  900:
        -:  901:                    ++xbeg;
        -:  902:
        -:  903:                    ASSERT_TRUE(xbeg == xbeg2 + 1);
        -:  904:                }
        -:  905:
        -:  906:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_test_2) {
        -:  907:                    typedef typename TestFixture::deque_type deque_type;
        -:  908:
        -:  909:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  910:
        -:  911:                    const deque_type x = _x;
        -:  912:
        -:  913:                    typename deque_type::const_iterator xbeg = x.begin();
        -:  914:
        -:  915:                    ASSERT_TRUE(xbeg + 2 == x.end());
        -:  916:                }
        -:  917:
        -:  918:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_test_3) {
        -:  919:                    typedef typename TestFixture::deque_type deque_type;
        -:  920:
        -:  921:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  922:
        -:  923:                    const deque_type x = _x;
        -:  924:
        -:  925:                    typename deque_type::const_iterator xbeg = x.begin();
        -:  926:
        -:  927:                    ASSERT_FALSE(xbeg + 1 == x.begin());
        -:  928:                }
        -:  929:
        -:  930:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_test_4) {
        -:  931:                    typedef typename TestFixture::deque_type deque_type;
        -:  932:
        -:  933:                    deque_type _x(29); _x[24] = 1; _x[1] = 4;
        -:  934:
        -:  935:                    const deque_type x = _x;
        -:  936:
        -:  937:                    typename deque_type::const_iterator xbeg = x.begin() + 24;
        -:  938:
        -:  939:                    ASSERT_EQ(*xbeg, 1);
        -:  940:                }
        -:  941:
        -:  942:                // ----------
        -:  943:                // operator -
        -:  944:                // ----------
        -:  945:
        -:  946:                TYPED_TEST(Deque_Fixture, const_iter_minus_op_test_1) {
        -:  947:                    typedef typename TestFixture::deque_type deque_type;
        -:  948:
        -:  949:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  950:
        -:  951:                    const deque_type x = _x;
        -:  952:
        -:  953:                    typename deque_type::const_iterator xbeg = x.end();
        -:  954:                    typename deque_type::const_iterator xbeg2 = x.begin() + 1;
        -:  955:
        -:  956:                    ASSERT_TRUE(xbeg - 1 == xbeg2);
        -:  957:                }
        -:  958:
        -:  959:                TYPED_TEST(Deque_Fixture, const_iter_minus_op_test_2) {
        -:  960:                    typedef typename TestFixture::deque_type deque_type;
        -:  961:
        -:  962:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  963:
        -:  964:                    const deque_type x = _x;
        -:  965:
        -:  966:                    typename deque_type::const_iterator xbeg = x.end();
        -:  967:                    typename deque_type::const_iterator xbeg2 = x.begin();
        -:  968:
        -:  969:                    ASSERT_TRUE(xbeg - 2 == xbeg2);
        -:  970:                }
        -:  971:
        -:  972:                TYPED_TEST(Deque_Fixture, const_iter_minus_op_test_3) {
        -:  973:                    typedef typename TestFixture::deque_type deque_type;
        -:  974:
        -:  975:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -:  976:
        -:  977:                    const deque_type x = _x;
        -:  978:
        -:  979:                    typename deque_type::const_iterator xbeg = x.end();
        -:  980:                    typename deque_type::const_iterator xbeg2 = x.begin();
        -:  981:
        -:  982:                    ASSERT_FALSE(xbeg - 1 == xbeg2);
        -:  983:                }
        -:  984:
        -:  985:                TYPED_TEST(Deque_Fixture, const_iter_minus_op_test_4) {
        -:  986:                    typedef typename TestFixture::deque_type deque_type;
        -:  987:
        -:  988:                    deque_type _x(92, 31); _x[50] = 1;
        -:  989:
        -:  990:                    const deque_type x = _x;
        -:  991:
        -:  992:                    typename deque_type::const_iterator xbeg = x.end();
        -:  993:
        -:  994:                    ASSERT_EQ(*(xbeg - 42), 1);
        -:  995:                }*/
        -:  996:                /* NEED TO CHANGE THESE    
        -:  997:				// ----------
        -:  998:                // operator *
        -:  999:                // ----------
        -: 1000:
        -: 1001:                TYPED_TEST(Deque_Fixture, const_iter_deref_op_test_1) {
        -: 1002:                    typedef typename TestFixture::deque_type deque_type;
        -: 1003:
        -: 1004:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1005:
        -: 1006:                    const deque_type x = _x;
        -: 1007:
        -: 1008:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1009:
        -: 1010:                    ASSERT_EQ(*xbeg, 1);
        -: 1011:                }
        -: 1012:
        -: 1013:                TYPED_TEST(Deque_Fixture, const_iter_deref_op_test_2) {
        -: 1014:                    typedef typename TestFixture::deque_type deque_type;
        -: 1015:
        -: 1016:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1017:
        -: 1018:                    const deque_type x = _x;
        -: 1019:
        -: 1020:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1021:
        -: 1022:                    ++xbeg;
        -: 1023:
        -: 1024:                    ASSERT_EQ(*xbeg, 4);
        -: 1025:                }
        -: 1026:
        -: 1027:                TYPED_TEST(Deque_Fixture, const_iter_deref_op_test_3) {
        -: 1028:                    typedef typename TestFixture::deque_type deque_type;
        -: 1029:
        -: 1030:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1031:
        -: 1032:                    const deque_type x = _x;
        -: 1033:
        -: 1034:                    typename deque_type::const_iterator xbeg = x.end();
        -: 1035:
        -: 1036:                    --xbeg;
        -: 1037:
        -: 1038:                    ASSERT_EQ(*xbeg, 4);
        -: 1039:                }
        -: 1040:
        -: 1041:                // -----------
        -: 1042:                // operator ->
        -: 1043:                // -----------
        -: 1044:
        -: 1045:                TYPED_TEST(Deque_Fixture, const_iter_arrow_op_test_1) {
        -: 1046:                    struct S {
        -: 1047:                        int a;
        -: 1048:                        int b;
        -: 1049:                    };
        -: 1050:
        -: 1051:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -: 1052:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -: 1053:
        -: 1054:                    deque<S> _x(2); 
        -: 1055:                    _x[0] = s_a;
        -: 1056:                    _x[1] = s_b;
        -: 1057:
        -: 1058:                    const deque<S> x = _x;
        -: 1059:
        -: 1060:                    auto xbeg = x.begin();
        -: 1061:
        -: 1062:                    ASSERT_EQ(xbeg->a, 1);
        -: 1063:                }
        -: 1064:
        -: 1065:                TYPED_TEST(Deque_Fixture, const_iter_arrow_op_test_2) {
        -: 1066:                    struct S {
        -: 1067:                        int a;
        -: 1068:                        int b;
        -: 1069:                    };
        -: 1070:
        -: 1071:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -: 1072:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -: 1073:
        -: 1074:                    deque<S> _x(2); 
        -: 1075:                    _x[0] = s_a;
        -: 1076:                    _x[1] = s_b;
        -: 1077:
        -: 1078:                    const deque<S> x = _x;
        -: 1079:
        -: 1080:                    auto xbeg = x.begin();
        -: 1081:
        -: 1082:                    ASSERT_EQ(xbeg->b, 3);
        -: 1083:                }
        -: 1084:
        -: 1085:                TYPED_TEST(Deque_Fixture, const_iter_arrow_op_test_3) {
        -: 1086:                    struct S {
        -: 1087:                        int a;
        -: 1088:                        int b;
        -: 1089:                    };
        -: 1090:
        -: 1091:                    struct S s_a; s_a.a = 1; s_a.b = 3;
        -: 1092:                    struct S s_b; s_b.a = 5; s_b.b = 7;
        -: 1093:
        -: 1094:                    deque<S> _x(2); 
        -: 1095:                    _x[0] = s_a;
        -: 1096:                    _x[1] = s_b;
        -: 1097:
        -: 1098:                    const deque<S> x = _x;
        -: 1099:
        -: 1100:                    auto xbeg = x.begin(); ++xbeg;
        -: 1101:
        -: 1102:                    ASSERT_EQ(xbeg->b, 7);
        -: 1103:                }*/
        -: 1104:
        -: 1105:/* 			NEED TO CHANGE THESE
        -: 1106:				// -----------
        -: 1107:                // operator ++
        -: 1108:                // -----------
        -: 1109:                
        -: 1110:                TYPED_TEST(Deque_Fixture, const_iter_pre_incr_op_test_1) {
        -: 1111:                    typedef typename TestFixture::deque_type deque_type;
        -: 1112:
        -: 1113:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1114:
        -: 1115:                    const deque_type x = _x;
        -: 1116:
        -: 1117:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1118:                    typename deque_type::const_iterator xbeg2 = xbeg + 1;
        -: 1119:
        -: 1120:                    ++xbeg;
        -: 1121:
        -: 1122:                    ASSERT_TRUE(xbeg == xbeg2);
        -: 1123:                }
        -: 1124:
        -: 1125:                TYPED_TEST(Deque_Fixture, const_iter_pre_incr_op_test_2) {
        -: 1126:                    typedef typename TestFixture::deque_type deque_type;
        -: 1127:
        -: 1128:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1129:
        -: 1130:                    const deque_type x = _x;
        -: 1131:
        -: 1132:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1133:                    typename deque_type::const_iterator xbeg2 = xbeg;
        -: 1134:
        -: 1135:                    ++xbeg;
        -: 1136:
        -: 1137:                    ASSERT_FALSE(xbeg == xbeg2);
        -: 1138:                }
        -: 1139:
        -: 1140:                TYPED_TEST(Deque_Fixture, const_iter_pre_incr_op_test_3) {
        -: 1141:                    typedef typename TestFixture::deque_type deque_type;
        -: 1142:
        -: 1143:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1144:
        -: 1145:                    const deque_type x = _x;
        -: 1146:
        -: 1147:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1148:
        -: 1149:                    ++xbeg;
        -: 1150:                    ++xbeg;
        -: 1151:
        -: 1152:                    ASSERT_TRUE(xbeg == x.end());
        -: 1153:                }
        -: 1154:
        -: 1155:                // (prefix and postfix)
        -: 1156:
        -: 1157:                TYPED_TEST(Deque_Fixture, const_iter_post_incr_op_test_1) {
        -: 1158:                    typedef typename TestFixture::deque_type deque_type;
        -: 1159:
        -: 1160:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1161:
        -: 1162:                    const deque_type x = _x;
        -: 1163:
        -: 1164:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1165:                    typename deque_type::const_iterator xbeg2 = xbeg + 1;
        -: 1166:
        -: 1167:                    xbeg++;
        -: 1168:
        -: 1169:                    ASSERT_TRUE(xbeg == xbeg2);
        -: 1170:                }
        -: 1171:
        -: 1172:                TYPED_TEST(Deque_Fixture, const_iter_post_incr_op_test_2) {
        -: 1173:                    typedef typename TestFixture::deque_type deque_type;
        -: 1174:
        -: 1175:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1176:
        -: 1177:                    const deque_type x = _x;
        -: 1178:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1179:                    typename deque_type::const_iterator xbeg2 = xbeg + 1;
        -: 1180:
        -: 1181:                    ASSERT_FALSE(xbeg++ == xbeg2);
        -: 1182:                }
        -: 1183:
        -: 1184:                TYPED_TEST(Deque_Fixture, const_iter_post_incr_op_test_3) {
        -: 1185:                    typedef typename TestFixture::deque_type deque_type;
        -: 1186:
        -: 1187:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1188:
        -: 1189:                    const deque_type x = _x;
        -: 1190:
        -: 1191:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1192:
        -: 1193:                    xbeg++;
        -: 1194:                    xbeg++;
        -: 1195:
        -: 1196:                    ASSERT_TRUE(xbeg == x.end());
        -: 1197:                }
        -: 1198:
        -: 1199:                // -----------
        -: 1200:                // operator --
        -: 1201:                // -----------
        -: 1202:                
        -: 1203:                TYPED_TEST(Deque_Fixture, const_iter_pre_decr_op_test_1) {
        -: 1204:                    typedef typename TestFixture::deque_type deque_type;
        -: 1205:
        -: 1206:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1207:
        -: 1208:                    const deque_type x = _x;
        -: 1209:
        -: 1210:                    typename deque_type::const_iterator xbeg = x.end();
        -: 1211:                    typename deque_type::const_iterator xbeg2 = xbeg - 1;
        -: 1212:
        -: 1213:                    --xbeg;
        -: 1214:
        -: 1215:                    ASSERT_TRUE(xbeg == xbeg2);
        -: 1216:                }
        -: 1217:
        -: 1218:                TYPED_TEST(Deque_Fixture, const_iter_pre_decr_op_test_2) {
        -: 1219:                    typedef typename TestFixture::deque_type deque_type;
        -: 1220:
        -: 1221:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1222:
        -: 1223:                    const deque_type x = _x;
        -: 1224:
        -: 1225:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1226:                    typename deque_type::const_iterator xbeg2 = x.end();
        -: 1227:
        -: 1228:                    --xbeg2;
        -: 1229:
        -: 1230:                    ASSERT_FALSE(xbeg == xbeg2);
        -: 1231:                }
        -: 1232:
        -: 1233:                TYPED_TEST(Deque_Fixture, const_iter_pre_decr_op_test_3) {
        -: 1234:                    typedef typename TestFixture::deque_type deque_type;
        -: 1235:
        -: 1236:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1237:
        -: 1238:                    const deque_type x = _x;
        -: 1239:
        -: 1240:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1241:                    typename deque_type::const_iterator xbeg2 = x.end();
        -: 1242:
        -: 1243:                    --xbeg2;
        -: 1244:
        -: 1245:                    ASSERT_TRUE(xbeg == --xbeg2);
        -: 1246:                }
        -: 1247:
        -: 1248:                // (prefix and postfix)
        -: 1249:
        -: 1250:                TYPED_TEST(Deque_Fixture, const_iter_post_decr_op_test_1) {
        -: 1251:                    typedef typename TestFixture::deque_type deque_type;
        -: 1252:
        -: 1253:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1254:
        -: 1255:                    const deque_type x = _x;
        -: 1256:
        -: 1257:                    typename deque_type::const_iterator xbeg = x.end();
        -: 1258:                    typename deque_type::const_iterator xbeg2 = xbeg - 1;
        -: 1259:
        -: 1260:                    xbeg--;
        -: 1261:
        -: 1262:                    ASSERT_TRUE(xbeg == xbeg2);
        -: 1263:                }
        -: 1264:
        -: 1265:                TYPED_TEST(Deque_Fixture, const_iter_post_decr_op_test_2) {
        -: 1266:                    typedef typename TestFixture::deque_type deque_type;
        -: 1267:
        -: 1268:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1269:
        -: 1270:                    const deque_type x = _x;
        -: 1271:
        -: 1272:                    typename deque_type::const_iterator xbeg = x.end();
        -: 1273:                    typename deque_type::const_iterator xbeg2 = xbeg - 2;
        -: 1274:
        -: 1275:                    xbeg2--;
        -: 1276:
        -: 1277:                    ASSERT_FALSE(xbeg2-- == xbeg);
        -: 1278:                }
        -: 1279:
        -: 1280:                TYPED_TEST(Deque_Fixture, const_iter_post_decr_op_test_3) {
        -: 1281:                    typedef typename TestFixture::deque_type deque_type;
        -: 1282:
        -: 1283:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1284:
        -: 1285:                    const deque_type x = _x;
        -: 1286:
        -: 1287:                    typename deque_type::const_iterator xbeg = x.end();
        -: 1288:                    typename deque_type::const_iterator xbeg2 = xbeg - 2;
        -: 1289:
        -: 1290:                    xbeg--;
        -: 1291:                    xbeg--;
        -: 1292:
        -: 1293:                    ASSERT_TRUE(xbeg == xbeg2);
        -: 1294:                }
        -: 1295:
        -: 1296:                // -----------
        -: 1297:                // operator +=
        -: 1298:                // -----------
        -: 1299:
        -: 1300:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_equal_test_1) {
        -: 1301:                    typedef typename TestFixture::deque_type deque_type;
        -: 1302:
        -: 1303:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1304:
        -: 1305:                    const deque_type x = _x;
        -: 1306:
        -: 1307:
        -: 1308:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1309:                    typename deque_type::const_iterator xbeg2 = xbeg;
        -: 1310:
        -: 1311:                    xbeg += 1;
        -: 1312:
        -: 1313:                    ASSERT_TRUE(xbeg == xbeg2 + 1);
        -: 1314:                }
        -: 1315:
        -: 1316:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_equal_test_2) {
        -: 1317:                    typedef typename TestFixture::deque_type deque_type;
        -: 1318:
        -: 1319:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1320:
        -: 1321:                    const deque_type x = _x;
        -: 1322:
        -: 1323:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1324:
        -: 1325:                    xbeg += 2;
        -: 1326:
        -: 1327:                    ASSERT_TRUE(xbeg == x.end());
        -: 1328:                }
        -: 1329:
        -: 1330:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_equal_test_3) {
        -: 1331:                    typedef typename TestFixture::deque_type deque_type;
        -: 1332:
        -: 1333:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1334:
        -: 1335:                    const deque_type x = _x;
        -: 1336:
        -: 1337:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1338:
        -: 1339:                    xbeg += 1;
        -: 1340:
        -: 1341:                    ASSERT_FALSE(xbeg == x.begin());
        -: 1342:                }
        -: 1343:
        -: 1344:                TYPED_TEST(Deque_Fixture, const_iter_plus_op_equal_test_4) {
        -: 1345:                    typedef typename TestFixture::deque_type deque_type;
        -: 1346:
        -: 1347:                    deque_type _x(100, 10); _x[24] = 1;
        -: 1348:
        -: 1349:                    const deque_type x = _x;
        -: 1350:
        -: 1351:                    typename deque_type::const_iterator xbeg = x.begin();
        -: 1352:
        -: 1353:                    xbeg += 24;
        -: 1354:
        -: 1355:                    ASSERT_EQ(*xbeg, 1);
        -: 1356:                }
        -: 1357:
        -: 1358:
        -: 1359:                // -----------
        -: 1360:                // operator -=
        -: 1361:                // -----------
        -: 1362:
        -: 1363:                TYPED_TEST(Deque_Fixture, const_iter_minus_equal_op_test_1) {
        -: 1364:                    typedef typename TestFixture::deque_type deque_type;
        -: 1365:
        -: 1366:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1367:
        -: 1368:                    const deque_type x = _x;
        -: 1369:
        -: 1370:                    typename deque_type::const_iterator xbeg = x.end();
        -: 1371:                    typename deque_type::const_iterator xbeg2 = x.begin() + 1;
        -: 1372:
        -: 1373:                    xbeg -= 1;
        -: 1374:
        -: 1375:                    ASSERT_TRUE(xbeg == xbeg2);
        -: 1376:                }
        -: 1377:
        -: 1378:                TYPED_TEST(Deque_Fixture, const_iter_minus_equal_op_test_2) {
        -: 1379:                    typedef typename TestFixture::deque_type deque_type;
        -: 1380:
        -: 1381:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1382:
        -: 1383:                    const deque_type x = _x;
        -: 1384:
        -: 1385:                    typename deque_type::const_iterator xbeg = x.end();
        -: 1386:                    typename deque_type::const_iterator xbeg2 = x.begin();
        -: 1387:
        -: 1388:                    xbeg -= 2;
        -: 1389:
        -: 1390:                    ASSERT_TRUE(xbeg == xbeg2);
        -: 1391:                }
        -: 1392:
        -: 1393:                TYPED_TEST(Deque_Fixture, const_iter_minus_equal_op_test_3) {
        -: 1394:                    typedef typename TestFixture::deque_type deque_type;
        -: 1395:
        -: 1396:                    deque_type _x(2); _x[0] = 1; _x[1] = 4;
        -: 1397:
        -: 1398:                    const deque_type x = _x;
        -: 1399:
        -: 1400:                    typename deque_type::const_iterator xbeg = x.end();
        -: 1401:                    typename deque_type::const_iterator xbeg2 = x.begin();
        -: 1402:
        -: 1403:                    xbeg -= 1;
        -: 1404:
        -: 1405:                    ASSERT_FALSE(xbeg == xbeg2);
        -: 1406:                }
        -: 1407:*/
        -: 1408:    // --------
        -: 1409:    // my_deque
        -: 1410:    // --------
        -: 1411:
        -: 1412:        // ----------
        -: 1413:        // operator =
        -: 1414:        // ----------
        -: 1415:
        -: 1416:  /*      TYPED_TEST(Deque_Fixture, deque_assignment_op_test_1) {
        -: 1417:            typedef typename TestFixture::deque_type deque_type;
        -: 1418:
        -: 1419:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1420:            deque_type y = x;
        -: 1421:            ASSERT_EQ(x,y);
        -: 1422:        }
        -: 1423:
        -: 1424:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_2) {
        -: 1425:            typedef typename TestFixture::deque_type deque_type;
        -: 1426:
        -: 1427:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1428:            deque_type y(4);
        -: 1429:            y = x;
        -: 1430:            x[0] = 20;
        -: 1431:            ASSERT_TRUE(x != y);
        -: 1432:        }
        -: 1433:
        -: 1434:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_3) {
        -: 1435:            typedef typename TestFixture::deque_type deque_type;
        -: 1436:
        -: 1437:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1438:            deque_type y = x;
        -: 1439:            y[0] = 20;
        -: 1440:            ASSERT_TRUE(x != y);
        -: 1441:        }
        -: 1442:
        -: 1443:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_4) {
        -: 1444:            typedef typename TestFixture::deque_type deque_type;
        -: 1445:
        -: 1446:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1447:            deque_type y;
        -: 1448:            x = y;
        -: 1449:            ASSERT_EQ(x,y);
        -: 1450:        }
        -: 1451:
        -: 1452:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_5) {
        -: 1453:            typedef typename TestFixture::deque_type deque_type;
        -: 1454:
        -: 1455:            deque_type x(100, 10);
        -: 1456:            deque_type y(2);
        -: 1457:            x = y;
        -: 1458:            ASSERT_EQ(x,y);
        -: 1459:        }
        -: 1460:
        -: 1461:        TYPED_TEST(Deque_Fixture, deque_assignment_op_test_6) {
        -: 1462:            typedef typename TestFixture::deque_type deque_type;
        -: 1463:
        -: 1464:            deque_type x(100, 10);
        -: 1465:            deque_type y(2);
        -: 1466:            y = x;
        -: 1467:            ASSERT_EQ(x,y);
        -: 1468:        }
        -: 1469:*/
        -: 1470:
        -: 1471:
        -: 1472:/*NEED TO CHANGE THESE
        -: 1473:		// -----------
        -: 1474:        // operator []
        -: 1475:        // -----------
        -: 1476:
        -: 1477:        TYPED_TEST(Deque_Fixture, deque_index_op_test_1) {
        -: 1478:            typedef typename TestFixture::deque_type deque_type;
        -: 1479:
        -: 1480:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1481:            ASSERT_EQ(x[0],1);
        -: 1482:        }
        -: 1483:
        -: 1484:        TYPED_TEST(Deque_Fixture, deque_index_op_test_2) {
        -: 1485:            typedef typename TestFixture::deque_type deque_type;
        -: 1486:
        -: 1487:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1488:            ASSERT_EQ(x[1],2);
        -: 1489:        }
        -: 1490:
        -: 1491:        TYPED_TEST(Deque_Fixture, deque_index_op_test_3) {
        -: 1492:            typedef typename TestFixture::deque_type deque_type;
        -: 1493:
        -: 1494:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1495:            ASSERT_EQ(x[2],3);
        -: 1496:        }
        -: 1497:
        -: 1498:        // reference and const_reference
        -: 1499:
        -: 1500:        TYPED_TEST(Deque_Fixture, const_deque_index_op_test_1) {
        -: 1501:            typedef typename TestFixture::deque_type deque_type;
        -: 1502:
        -: 1503:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1504:            const deque_type y = x;
        -: 1505:            ASSERT_EQ(y[0],1);
        -: 1506:        }
        -: 1507:
        -: 1508:        TYPED_TEST(Deque_Fixture, const_deque_index_op_test_2) {
        -: 1509:            typedef typename TestFixture::deque_type deque_type;
        -: 1510:
        -: 1511:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1512:            const deque_type y = x;
        -: 1513:            ASSERT_EQ(y[1],2);
        -: 1514:        }
        -: 1515:
        -: 1516:        TYPED_TEST(Deque_Fixture, const_deque_index_op_test_3) {
        -: 1517:            typedef typename TestFixture::deque_type deque_type;
        -: 1518:
        -: 1519:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1520:            const deque_type y = x;
        -: 1521:            ASSERT_EQ(y[2],3);
        -: 1522:        }
        -: 1523:
        -: 1524:        // --
        -: 1525:        // at
        -: 1526:        // --
        -: 1527:
        -: 1528:        TYPED_TEST(Deque_Fixture, deque_at_op_test_1) {
        -: 1529:            typedef typename TestFixture::deque_type deque_type;
        -: 1530:
        -: 1531:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1532:            ASSERT_EQ(x.at(0),1);
        -: 1533:        }
        -: 1534:
        -: 1535:        TYPED_TEST(Deque_Fixture, deque_at_op_test_2) {
        -: 1536:            typedef typename TestFixture::deque_type deque_type;
        -: 1537:
        -: 1538:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1539:            ASSERT_EQ(x.at(1),2);
        -: 1540:        }
        -: 1541:
        -: 1542:        TYPED_TEST(Deque_Fixture, deque_at_op_test_3) {
        -: 1543:            typedef typename TestFixture::deque_type deque_type;
        -: 1544:
        -: 1545:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1546:            ASSERT_EQ(x.at(2),3);
        -: 1547:        }
        -: 1548:
        -: 1549:        // reference and const_reference
        -: 1550:
        -: 1551:        TYPED_TEST(Deque_Fixture, const_deque_at_op_test_1) {
        -: 1552:            typedef typename TestFixture::deque_type deque_type;
        -: 1553:
        -: 1554:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1555:            const deque_type y = x;
        -: 1556:            ASSERT_EQ(y.at(0),1);
        -: 1557:        }
        -: 1558:
        -: 1559:        TYPED_TEST(Deque_Fixture, const_deque_at_op_test_2) {
        -: 1560:            typedef typename TestFixture::deque_type deque_type;
        -: 1561:
        -: 1562:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1563:            const deque_type y = x;
        -: 1564:            ASSERT_EQ(y.at(1),2);
        -: 1565:        }
        -: 1566:
        -: 1567:        TYPED_TEST(Deque_Fixture, const_deque_at_op_test_3) {
        -: 1568:            typedef typename TestFixture::deque_type deque_type;
        -: 1569:
        -: 1570:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1571:            const deque_type y = x;
        -: 1572:            ASSERT_EQ(y.at(2),3);
        -: 1573:        }
        -: 1574:
        -: 1575:        // ----
        -: 1576:        // back
        -: 1577:        // ----
        -: 1578:
        -: 1579:        TYPED_TEST(Deque_Fixture, deque_back_test_1) {
        -: 1580:            typedef typename TestFixture::deque_type deque_type;
        -: 1581:
        -: 1582:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1583:            deque_type y(x); 
        -: 1584:            ASSERT_EQ(x.back(),4);
        -: 1585:        }
        -: 1586:
        -: 1587:        TYPED_TEST(Deque_Fixture, deque_back_test_2) {
        -: 1588:            typedef typename TestFixture::deque_type deque_type;
        -: 1589:
        -: 1590:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1591:            ASSERT_EQ(x.back(),0);
        -: 1592:        }
        -: 1593:
        -: 1594:        TYPED_TEST(Deque_Fixture, deque_back_test_3) {
        -: 1595:            typedef typename TestFixture::deque_type deque_type;
        -: 1596:
        -: 1597:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1598:            ASSERT_EQ(x.back(),3);
        -: 1599:        }
        -: 1600:
        -: 1601:        // reference and const_reference
        -: 1602:
        -: 1603:        TYPED_TEST(Deque_Fixture, const_deque_back_test_1) {
        -: 1604:            typedef typename TestFixture::deque_type deque_type;
        -: 1605:
        -: 1606:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3; x[3] = 4;
        -: 1607:            const deque_type y = x;
        -: 1608:            ASSERT_EQ(y.back(),4);
        -: 1609:        }
        -: 1610:
        -: 1611:        TYPED_TEST(Deque_Fixture, const_deque_back_test_2) {
        -: 1612:            typedef typename TestFixture::deque_type deque_type;
        -: 1613:
        -: 1614:            deque_type x(4); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1615:            const deque_type y = x;
        -: 1616:            ASSERT_EQ(y.back(),0);
        -: 1617:        }
        -: 1618:
        -: 1619:        TYPED_TEST(Deque_Fixture, const_deque_back_test_3) {
        -: 1620:            typedef typename TestFixture::deque_type deque_type;
        -: 1621:
        -: 1622:            deque_type x(3); x[0] = 1; x[1] = 2; x[2] = 3;
        -: 1623:            const deque_type y = x;
        -: 1624:            ASSERT_EQ(y.back(),3);
        -: 1625:        }
        -: 1626:*/
